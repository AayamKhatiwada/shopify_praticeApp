{"version":3,"file":"tunnel.js","sourceRoot":"","sources":["../src/tunnel.ts"],"names":[],"mappings":"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","sourcesContent":["import {TUNNEL_PROVIDER} from './provider.js'\nimport {os, output, ui, error as cliKitError} from '@shopify/cli-kit'\nimport {startTunnel, TunnelError, TunnelErrorType} from '@shopify/cli-kit/node/plugins/tunnel'\nimport ngrok from '@shopify/ngrok'\nimport {renderFatalError} from '@shopify/cli-kit/node/ui'\nimport {err, ok, Result} from '@shopify/cli-kit/common/result'\n\nexport default startTunnel({provider: TUNNEL_PROVIDER, action: hookStart})\n\n// New entry point for hooks\nexport async function hookStart(port: number): Promise<Result<{url: string}, TunnelError>> {\n  try {\n    const url = await start({port})\n    return ok({url})\n    // eslint-disable-next-line no-catch-all/no-catch-all, @typescript-eslint/no-explicit-any\n  } catch (error: any) {\n    const errorType = getErrorType(error.message)\n    renderFatalError(\n      new cliKitError.Abort(`The ngrok tunnel could not be started.\\n\\n${error.message}`, buildTryMessage(errorType)),\n    )\n    return err(new TunnelError(errorType, error.message))\n  }\n}\n\n// Old entry point, backwards compatible with old CLI versions\nexport async function start(options: {port: number}): Promise<string> {\n  if (!(await ngrok.validConfig())) {\n    const token = await tokenPrompt()\n    await authenticate(token)\n  }\n\n  return ngrok.connect({proto: 'http', addr: options.port})\n}\n\nexport async function authenticate(token: string): Promise<void> {\n  const validToken = token ?? (await tokenPrompt(false))\n  await ngrok.authtoken(validToken)\n  await ngrok.upgradeConfig()\n}\n\nasync function tokenPrompt(showExplanation = true): Promise<string> {\n  const explanation = showExplanation\n    ? '\\nTo make your local code accessible to your dev store, you need to use a ' +\n      'Shopify-trusted tunneling service called ngrok. '\n    : ''\n  const ngrokURL = 'https://dashboard.ngrok.com/get-started/your-authtoken'\n  const link = output.token.link(ngrokURL, ngrokURL)\n  output.info(output.content`${explanation}To sign up and get an auth token: ${link}\\n`)\n\n  const input: {token: string} = await ui.prompt([\n    {\n      type: 'password',\n      name: 'token',\n      message: 'Enter your ngrok token.',\n      validate: (value) => {\n        if (value.length === 0) {\n          return \"Token can't be empty\"\n        }\n        return true\n      },\n    },\n  ])\n\n  return input.token\n}\n\nfunction buildTryMessage(errorType: TunnelErrorType): string | undefined {\n  if (errorType === 'tunnel-already-running') {\n    const {platform} = os.platformAndArch()\n    const tryMessage = 'Kill all the ngrok processes with '\n    if (platform === 'windows') {\n      return tryMessage.concat(output.content`${output.token.genericShellCommand('taskkill /f /im ngrok.exe')}`.value)\n    } else {\n      return tryMessage.concat(output.content`${output.token.genericShellCommand('killall ngrok')}`.value)\n    }\n  } else if (errorType === 'wrong-credentials') {\n    return output.content`Update your ngrok token with ${output.token.genericShellCommand('shopify ngrok auth')}`.value\n  }\n  return undefined\n}\n\nfunction getErrorType(nrokErrorMessage: string): TunnelErrorType {\n  if (/err_ngrok_108/.test(nrokErrorMessage)) {\n    return 'tunnel-already-running'\n  } else if (/err_ngrok_105|err_ngrok_106|err_ngrok_107/.test(nrokErrorMessage)) {\n    return 'wrong-credentials'\n  }\n  return 'unknown'\n}\n"]}