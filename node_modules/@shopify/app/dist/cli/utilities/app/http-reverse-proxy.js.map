{"version":3,"file":"http-reverse-proxy.js","sourceRoot":"","sources":["../../../../src/cli/utilities/app/http-reverse-proxy.ts"],"names":[],"mappings":"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","sourcesContent":["import {port, output, abort} from '@shopify/cli-kit'\nimport httpProxy from 'http-proxy'\nimport {renderConcurrent} from '@shopify/cli-kit/node/ui'\nimport {AbortController} from 'abort-controller'\nimport {Writable} from 'stream'\nimport * as http from 'http'\n\nexport interface ReverseHTTPProxyTarget {\n  /** The prefix to include in the logs\n   *   [vite] Output coming from Vite\n   */\n  logPrefix: string\n\n  /**\n   * The HTTP path prefix used to match against request and determine if the traffic should be\n   * forwarded to this target\n   */\n  pathPrefix?: string\n  /**\n   * A callback to invoke the process. stdout and stderr should be used\n   * to send standard output and error data that gets formatted with the\n   * right prefix.\n   */\n  action: (stdout: Writable, stderr: Writable, signal: abort.Signal, port: number) => Promise<void> | void\n}\n\n/**\n * A convenient function that runs an HTTP server and does path-based traffic forwarding to sub-processes that run\n * an HTTP server. The method assigns a random port to each of the processes.\n * @param tunnelUrl - The URL of the tunnel.\n * @param portNumber - The port to use for the proxy HTTP server. When undefined, a random port is automatically assigned.\n * @param proxyTargets - List of target processes to forward traffic to.\n * @param additionalProcesses - Additional processes to run. The proxy won't forward traffic to these processes.\n * @returns A promise that resolves with an interface to get the port of the proxy and stop it.\n */\nexport async function runConcurrentHTTPProcessesAndPathForwardTraffic(\n  portNumber: number | undefined = undefined,\n  proxyTargets: ReverseHTTPProxyTarget[],\n  additionalProcesses: output.OutputProcess[],\n): Promise<void> {\n  const rules: {[key: string]: string} = {}\n\n  const processes = await Promise.all(\n    proxyTargets.map(async (target): Promise<output.OutputProcess> => {\n      const targetPort = await port.getRandomPort()\n      rules[target.pathPrefix ?? '/'] = `http://localhost:${targetPort}`\n      return {\n        prefix: target.logPrefix,\n        action: async (stdout, stderr, signal) => {\n          await target.action(stdout, stderr, signal, targetPort)\n        },\n      }\n    }),\n  )\n\n  const availablePort = portNumber ?? (await port.getRandomPort())\n\n  output.debug(output.content`\nStarting reverse HTTP proxy on port ${output.token.raw(availablePort.toString())}\nRouting traffic rules:\n${output.token.json(JSON.stringify(rules))}\n`)\n\n  const proxy = httpProxy.createProxy()\n  const server = http.createServer(function (req, res) {\n    const target = match(rules, req)\n    if (target) return proxy.web(req, res, {target})\n\n    output.debug(`\nReverse HTTP proxy error - Invalid path: ${req.url}\nThese are the allowed paths:\n${output.token.json(JSON.stringify(rules))}\n`)\n\n    res.statusCode = 500\n    res.end(`Invalid path ${req.url}`)\n  })\n\n  // Capture websocket requests and forward them to the proxy\n  server.on('upgrade', function (req, socket, head) {\n    const target = match(rules, req)\n    if (target) return proxy.ws(req, socket, head, {target})\n    socket.destroy()\n  })\n\n  const abortController = new AbortController()\n  abortController.signal.addEventListener('abort', () => {\n    server.close()\n  })\n  await Promise.all([\n    renderConcurrent({\n      processes: [...processes, ...additionalProcesses],\n      abortController,\n    }),\n    server.listen(availablePort),\n  ])\n}\n\nfunction match(rules: {[key: string]: string}, req: http.IncomingMessage) {\n  const path: string = req.url ?? '/'\n\n  for (const pathPrefix in rules) {\n    if (path.startsWith(pathPrefix)) return rules[pathPrefix]\n  }\n\n  return undefined\n}\n"]}