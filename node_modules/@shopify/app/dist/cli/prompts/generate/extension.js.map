{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../src/cli/prompts/generate/extension.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  extensions,\n  ExtensionTypes,\n  getExtensionOutputConfig,\n  isUiExtensionType,\n  isFunctionExtensionType,\n  functionExtensionTemplates,\n  extensionTypesGroups,\n} from '../../constants.js'\nimport {getUIExtensionTemplates, isValidUIExtensionTemplate} from '../../utilities/extensions/template-configuration.js'\nimport {ui, environment} from '@shopify/cli-kit'\nimport {generateRandomNameForSubdirectory} from '@shopify/cli-kit/node/fs'\n\ninterface GenerateExtensionOptions {\n  name?: string\n  extensionType?: string\n  extensionTypesAlreadyAtQuota: string[]\n  extensionFlavor?: string\n  directory: string\n}\n\ninterface GenerateExtensionOutput {\n  name: string\n  extensionType: ExtensionTypes\n  extensionFlavor?: string\n}\n\nexport const extensionFlavorQuestion = (extensionType: string): ui.Question => {\n  let choices: {name: string; value: string}[] = []\n  if (isUiExtensionType(extensionType)) {\n    choices = choices.concat(getUIExtensionTemplates(extensionType))\n  }\n  if (isFunctionExtensionType(extensionType)) {\n    choices = choices.concat(functionExtensionTemplates)\n  }\n  return {\n    type: 'select',\n    name: 'extensionFlavor',\n    message: 'What would you like to work in?',\n    choices,\n    default: 'react',\n  }\n}\n\nconst generateExtensionPrompt = async (\n  options: GenerateExtensionOptions,\n  prompt = ui.prompt,\n): Promise<GenerateExtensionOutput> => {\n  const questions: ui.Question<'name' | 'extensionType'>[] = []\n  const isShopify = await environment.local.isShopify()\n  const supportedExtensions = isShopify ? extensions.types : extensions.publicTypes\n  if (!options.extensionType) {\n    let relevantExtensionTypes = supportedExtensions.filter(\n      (type) => !options.extensionTypesAlreadyAtQuota.includes(type),\n    )\n    if (options.extensionFlavor) {\n      relevantExtensionTypes = relevantExtensionTypes.filter((relevantExtensionType) =>\n        isValidUIExtensionTemplate(relevantExtensionType, options.extensionFlavor),\n      )\n    }\n    questions.push({\n      type: 'select',\n      name: 'extensionType',\n      message: 'Type of extension?',\n      choices: relevantExtensionTypes\n        .map((type) => {\n          const choiceWithoutGroup = {\n            name: getExtensionOutputConfig(type).humanKey,\n            value: type,\n          }\n          const group = extensionTypesGroups.find((group) => includes(group.extensions, type))\n          if (group) {\n            return {\n              ...choiceWithoutGroup,\n              group: {\n                name: group.name,\n                order: extensionTypesGroups.indexOf(group),\n              },\n            }\n          }\n          return choiceWithoutGroup\n        })\n        .sort((c1, c2) => c1.name.localeCompare(c2.name)),\n    })\n  }\n  if (!options.name) {\n    questions.push({\n      type: 'input',\n      name: 'name',\n      message: \"Your extension's working name?\",\n      default: await generateRandomNameForSubdirectory({suffix: 'ext', directory: options.directory}),\n    })\n  }\n  let promptOutput: GenerateExtensionOutput = await prompt(questions)\n  const extensionType = {...options, ...promptOutput}.extensionType\n  if (!options.extensionFlavor && (isUiExtensionType(extensionType) || isFunctionExtensionType(extensionType))) {\n    promptOutput = {\n      ...promptOutput,\n      extensionFlavor: (\n        (await prompt([\n          extensionFlavorQuestion(extensionType),\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        ])) as any\n      ).extensionFlavor,\n    }\n  }\n  return {...options, ...promptOutput}\n}\n\nfunction includes<TNarrow extends TWide, TWide>(coll: ReadonlyArray<TNarrow>, el: TWide): el is TNarrow {\n  return coll.includes(el as TNarrow)\n}\n\nexport default generateExtensionPrompt\n"]}