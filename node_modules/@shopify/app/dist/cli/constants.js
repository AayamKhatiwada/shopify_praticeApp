export const configurationFileNames = {
    app: 'shopify.app.toml',
    extension: {
        ui: 'shopify.ui.extension.toml',
        theme: 'shopify.theme.extension.toml',
        function: 'shopify.function.extension.toml',
    },
    web: 'shopify.web.toml',
};
export const dotEnvFileNames = {
    production: '.env',
};
export const environmentVariables = {
    /**
     * Environment variable to instructs the CLI on running the extensions' CLI through its sources.
     */
    useExtensionsCLISources: 'SHOPIFY_USE_EXTENSIONS_CLI_SOURCES',
};
export const versions = {
    react: '^17.0.0',
    reactTypes: '17.0.30',
};
export const blocks = {
    extensions: {
        directoryName: 'extensions',
        configurationName: configurationFileNames.extension,
    },
    functions: {
        defaultUrl: 'https://github.com/Shopify/function-examples',
        defaultLanguage: 'wasm',
    },
    web: {
        directoryName: 'web',
        configurationName: configurationFileNames.web,
    },
};
/**
 * List of extensions for each category that are limited by quantity, only 1 of each is allowed per app
 */
export const limitedExtensions = {
    ui: ['product_subscription', 'checkout_post_purchase', 'web_pixel_extension'],
    theme: ['theme'],
    function: [],
};
export const publicFunctionExtensions = {
    types: ['product_discounts', 'order_discounts', 'shipping_discounts'],
};
export const functionExtensions = {
    types: [
        ...publicFunctionExtensions.types,
        'shipping_rate_presenter',
        'payment_customization',
        'delivery_customization',
    ],
};
export const functionExtensionTemplates = [
    { name: 'Wasm', value: 'wasm' },
    { name: 'Rust', value: 'rust' },
];
export function isFunctionExtensionType(extensionType) {
    return functionExtensions.types.includes(extensionType);
}
export const publicUIExtensions = {
    types: ['product_subscription', 'checkout_ui_extension', 'checkout_post_purchase', 'web_pixel_extension'],
};
export const uiExtensions = {
    types: [...publicUIExtensions.types, 'pos_ui_extension', 'customer_accounts_ui_extension'],
};
export const activeUIExtensions = {
    types: [...publicUIExtensions.types, 'pos_ui_extension', 'customer_accounts_ui_extension'].filter,
};
export const uiExtensionTemplates = [
    { name: 'TypeScript', value: 'typescript' },
    { name: 'JavaScript', value: 'vanilla-js' },
    { name: 'TypeScript React', value: 'typescript-react' },
    { name: 'JavaScript React', value: 'react' },
];
export function isUiExtensionType(extensionType) {
    return uiExtensions.types.includes(extensionType);
}
export const themeExtensions = {
    types: ['theme'],
};
export function isThemeExtensionType(extensionType) {
    return themeExtensions.types.includes(extensionType);
}
export const extensions = {
    types: [...themeExtensions.types, ...uiExtensions.types, ...functionExtensions.types],
    publicTypes: [...themeExtensions.types, ...publicUIExtensions.types, ...publicFunctionExtensions.types],
};
export function extensionTypeCategory(extensionType) {
    if (extensionType === 'theme') {
        return 'theme';
    }
    if (functionExtensions.types.includes(extensionType)) {
        return 'function';
    }
    return 'ui';
}
export function extensionTypeIsGated(extensionType) {
    return !extensions.publicTypes.includes(extensionType);
}
/**
 * Returns the runtime renderer dependency for a given UI extension type.
 * @param extensionType - Extension type.
 * @returns The renderer dependency that should be present in the app's package.json
 */
export function getUIExtensionRendererDependency(extensionType) {
    switch (extensionType) {
        case 'product_subscription':
            return { name: '@shopify/admin-ui-extensions-react', version: '^1.0.1' };
        case 'checkout_ui_extension':
            return { name: '@shopify/checkout-ui-extensions-react', version: '^0.20.0' };
        case 'checkout_post_purchase':
            return { name: '@shopify/post-purchase-ui-extensions-react', version: '^0.13.2' };
        case 'pos_ui_extension':
            return { name: '@shopify/retail-ui-extensions-react', version: '^0.19.0' };
        case 'customer_accounts_ui_extension':
            return { name: '@shopify/customer-account-ui-extensions-react', version: '^0.0.5' };
        case 'web_pixel_extension':
            return { name: '@shopify/web-pixels-extension', version: '^0.1.1' };
    }
}
export const uiExternalExtensionTypes = {
    types: ['web_pixel', 'post_purchase_ui', 'checkout_ui', 'pos_ui', 'subscription_ui', 'customer_accounts_ui'],
};
export const themeExternalExtensionTypes = {
    types: ['theme_app_extension'],
};
export const functionExternalExtensionTypes = {
    types: [
        'product_discount',
        'order_discount',
        'shipping_discount',
        'payment_customization',
        'delivery_option_presenter',
        'delivery_customization',
    ],
};
export const externalExtensionTypes = {
    types: [
        ...uiExternalExtensionTypes.types,
        ...themeExternalExtensionTypes.types,
        ...functionExternalExtensionTypes.types,
    ],
};
// The order of the groups in extensionTypesGroups will be the same displayed in the select prompt
export const extensionTypesGroups = [
    { name: 'Online store', extensions: ['theme'] },
    {
        name: 'Discounts and checkout',
        extensions: [
            'product_discounts',
            'order_discounts',
            'shipping_discounts',
            'checkout_ui_extension',
            'checkout_post_purchase',
        ],
    },
    { name: 'Analytics', extensions: ['web_pixel_extension'] },
    { name: 'Merchant admin', extensions: ['product_subscription'] },
    {
        name: 'Shopify private',
        extensions: [
            'customer_accounts_ui_extension',
            'payment_customization',
            'delivery_customization',
            'pos_ui_extension',
            'shipping_rate_presenter',
        ],
    },
];
export const externalExtensionTypeNames = {
    types: [
        'Web pixel',
        'Post-purchase UI',
        'Theme app extension',
        'Checkout UI',
        'POS UI',
        'Customer accounts UI',
        'Subscription UI',
        'Function - Product discount',
        'Function - Order discount',
        'Function - Shipping discount',
        'Payment customization',
        'Delivery option presenter',
        'Delivery customization',
    ],
};
export function getExtensionOutputConfig(extensionType) {
    switch (extensionType) {
        case 'web_pixel_extension':
            return buildExtensionOutputConfig('Web pixel');
        case 'checkout_post_purchase':
            return buildExtensionOutputConfig('Post-purchase UI', 'https://shopify.dev/apps/checkout/post-purchase');
        case 'theme':
            return buildExtensionOutputConfig('Theme app extension');
        case 'checkout_ui_extension':
            return buildExtensionOutputConfig('Checkout UI');
        case 'customer_accounts_ui_extension':
            return buildExtensionOutputConfig('Customer accounts UI');
        case 'product_subscription':
            return buildExtensionOutputConfig('Subscription UI');
        case 'pos_ui_extension':
            return buildExtensionOutputConfig('POS UI');
        case 'product_discounts':
            return buildExtensionOutputConfig('Function - Product discount', 'https://shopify.dev/apps/subscriptions/discounts');
        case 'order_discounts':
            return buildExtensionOutputConfig('Function - Order discount', 'https://shopify.dev/apps/subscriptions/discounts');
        case 'shipping_discounts':
            return buildExtensionOutputConfig('Function - Shipping discount', 'https://shopify.dev/apps/subscriptions/discounts');
        case 'payment_customization':
            return buildExtensionOutputConfig('Payment customization');
        case 'shipping_rate_presenter':
            return buildExtensionOutputConfig('Delivery option presenter');
        case 'delivery_customization':
            return buildExtensionOutputConfig('Delivery customization');
    }
}
/**
 * Each extension has a different ID in GraphQL.
 * Sometimes the ID is the same as the type, sometimes it's different.
 * @param type - The extension type
 * @returns The extension GraphQL ID
 */
export const extensionGraphqlId = (type) => {
    switch (type) {
        case 'product_subscription':
            return 'SUBSCRIPTION_MANAGEMENT';
        case 'checkout_ui_extension':
            return 'CHECKOUT_UI_EXTENSION';
        case 'checkout_post_purchase':
            return 'CHECKOUT_POST_PURCHASE';
        case 'pos_ui_extension':
            return 'POS_UI_EXTENSION';
        case 'theme':
            return 'THEME_APP_EXTENSION';
        case 'web_pixel_extension':
            return 'WEB_PIXEL_EXTENSION';
        case 'customer_accounts_ui_extension':
            return 'CUSTOMER_ACCOUNTS_UI_EXTENSION';
        case 'product_discounts':
        case 'order_discounts':
        case 'shipping_discounts':
        case 'payment_customization':
        case 'delivery_customization':
        case 'shipping_rate_presenter':
            // As we add new extensions, this bug will force us to add a new case here.
            return type.toUpperCase();
    }
};
function buildExtensionOutputConfig(humanKey, helpURL, additionalHelp) {
    return {
        humanKey,
        helpURL,
        additionalHelp,
    };
}
//# sourceMappingURL=constants.js.map