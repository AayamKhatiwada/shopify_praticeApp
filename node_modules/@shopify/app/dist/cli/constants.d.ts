import { DependencyVersion } from '@shopify/cli-kit/node/node-package-manager';
export declare const configurationFileNames: {
    readonly app: "shopify.app.toml";
    readonly extension: {
        readonly ui: "shopify.ui.extension.toml";
        readonly theme: "shopify.theme.extension.toml";
        readonly function: "shopify.function.extension.toml";
    };
    readonly web: "shopify.web.toml";
};
export declare const dotEnvFileNames: {
    production: string;
};
export declare const environmentVariables: {
    /**
     * Environment variable to instructs the CLI on running the extensions' CLI through its sources.
     */
    readonly useExtensionsCLISources: "SHOPIFY_USE_EXTENSIONS_CLI_SOURCES";
};
export declare const versions: {
    readonly react: "^17.0.0";
    readonly reactTypes: "17.0.30";
};
export declare const blocks: {
    readonly extensions: {
        readonly directoryName: "extensions";
        readonly configurationName: {
            readonly ui: "shopify.ui.extension.toml";
            readonly theme: "shopify.theme.extension.toml";
            readonly function: "shopify.function.extension.toml";
        };
    };
    readonly functions: {
        readonly defaultUrl: "https://github.com/Shopify/function-examples";
        readonly defaultLanguage: "wasm";
    };
    readonly web: {
        readonly directoryName: "web";
        readonly configurationName: "shopify.web.toml";
    };
};
/**
 * List of extensions for each category that are limited by quantity, only 1 of each is allowed per app
 */
export declare const limitedExtensions: {
    ui: UIExtensionTypes[];
    theme: ThemeExtensionTypes[];
    function: FunctionExtensionTypes[];
};
export declare const publicFunctionExtensions: {
    readonly types: readonly ["product_discounts", "order_discounts", "shipping_discounts"];
};
export declare const functionExtensions: {
    readonly types: readonly ["product_discounts", "order_discounts", "shipping_discounts", "shipping_rate_presenter", "payment_customization", "delivery_customization"];
};
export declare const functionExtensionTemplates: {
    name: string;
    value: string;
}[];
export declare function isFunctionExtensionType(extensionType: string): boolean;
export declare const publicUIExtensions: {
    readonly types: readonly ["product_subscription", "checkout_ui_extension", "checkout_post_purchase", "web_pixel_extension"];
};
export declare const uiExtensions: {
    readonly types: readonly ["product_subscription", "checkout_ui_extension", "checkout_post_purchase", "web_pixel_extension", "pos_ui_extension", "customer_accounts_ui_extension"];
};
export declare const activeUIExtensions: {
    types: {
        <S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[];
        (predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[];
    };
};
export declare type UIExtensionTypes = typeof uiExtensions.types[number];
export declare const uiExtensionTemplates: {
    name: string;
    value: string;
}[];
export declare function isUiExtensionType(extensionType: string): boolean;
export declare const themeExtensions: {
    readonly types: readonly ["theme"];
};
export declare type ThemeExtensionTypes = typeof themeExtensions.types[number];
export declare function isThemeExtensionType(extensionType: string): boolean;
export declare type FunctionExtensionTypes = typeof functionExtensions.types[number];
export declare const extensions: {
    types: ("product_subscription" | "checkout_ui_extension" | "checkout_post_purchase" | "web_pixel_extension" | "pos_ui_extension" | "customer_accounts_ui_extension" | "theme" | "product_discounts" | "order_discounts" | "shipping_discounts" | "shipping_rate_presenter" | "payment_customization" | "delivery_customization")[];
    publicTypes: ("product_subscription" | "checkout_ui_extension" | "checkout_post_purchase" | "web_pixel_extension" | "theme" | "product_discounts" | "order_discounts" | "shipping_discounts")[];
};
export declare type ExtensionTypes = typeof extensions.types[number];
declare type PublicExtensionTypes = typeof extensions.publicTypes[number];
declare type GatedExtensionTypes = Exclude<ExtensionTypes, PublicExtensionTypes>;
export declare function extensionTypeCategory(extensionType: ExtensionTypes): 'theme' | 'function' | 'ui';
export declare function extensionTypeIsGated(extensionType: ExtensionTypes): extensionType is GatedExtensionTypes;
/**
 * Returns the runtime renderer dependency for a given UI extension type.
 * @param extensionType - Extension type.
 * @returns The renderer dependency that should be present in the app's package.json
 */
export declare function getUIExtensionRendererDependency(extensionType: UIExtensionTypes): DependencyVersion | undefined;
export declare const uiExternalExtensionTypes: {
    readonly types: readonly ["web_pixel", "post_purchase_ui", "checkout_ui", "pos_ui", "subscription_ui", "customer_accounts_ui"];
};
export declare type UIExternalExtensionTypes = typeof uiExternalExtensionTypes.types[number];
export declare const themeExternalExtensionTypes: {
    readonly types: readonly ["theme_app_extension"];
};
export declare type ThemeExternalExtensionTypes = typeof themeExternalExtensionTypes.types[number];
export declare const functionExternalExtensionTypes: {
    readonly types: readonly ["product_discount", "order_discount", "shipping_discount", "payment_customization", "delivery_option_presenter", "delivery_customization"];
};
export declare type FunctionExternalExtensionTypes = typeof functionExternalExtensionTypes.types[number];
export declare const externalExtensionTypes: {
    readonly types: readonly ["web_pixel", "post_purchase_ui", "checkout_ui", "pos_ui", "subscription_ui", "customer_accounts_ui", "theme_app_extension", "product_discount", "order_discount", "shipping_discount", "payment_customization", "delivery_option_presenter", "delivery_customization"];
};
export declare type ExternalExtensionTypes = typeof externalExtensionTypes.types[number];
export declare const extensionTypesGroups: {
    name: string;
    extensions: ExtensionTypes[];
}[];
export declare const externalExtensionTypeNames: {
    readonly types: readonly ["Web pixel", "Post-purchase UI", "Theme app extension", "Checkout UI", "POS UI", "Customer accounts UI", "Subscription UI", "Function - Product discount", "Function - Order discount", "Function - Shipping discount", "Payment customization", "Delivery option presenter", "Delivery customization"];
};
export declare type ExternalExtensionTypeNames = typeof externalExtensionTypeNames.types[number];
export interface ExtensionOutputConfig {
    humanKey: ExternalExtensionTypeNames;
    helpURL?: string;
    additionalHelp?: string;
}
export declare function getExtensionOutputConfig(extensionType: ExtensionTypes): ExtensionOutputConfig;
/**
 * Each extension has a different ID in GraphQL.
 * Sometimes the ID is the same as the type, sometimes it's different.
 * @param type - The extension type
 * @returns The extension GraphQL ID
 */
export declare const extensionGraphqlId: (type: ExtensionTypes) => string;
export {};
