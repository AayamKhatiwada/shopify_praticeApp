{"version":3,"file":"functions.js","sourceRoot":"","sources":["../../../../src/cli/validators/extensions/functions.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAC,MAAM,kBAAkB,CAAA;AAEpD,MAAM,wBAAwB,GAAG,CAAC,UAAwC,EAAE,EAAE;IAC5E,MAAM,aAAa,GAAG,CAAC,SAAqC,EAAU,EAAE;QACtE,OAAO,MAAM,CAAC,gBAAgB,CAC5B,MAAM,CAAC,OAAO,CAAA,KAAK,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE,CAAC,KAAK,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAC5F,CAAA;IACH,CAAC,CAAA;IACD,MAAM,cAAc,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;IACjF,OAAO,IAAI,KAAK,CAAC,KAAK,CACpB,MAAM,CAAC,OAAO,CAAA;IACd,cAAc;OACX,EACH,yEAAyE,CAC1E,CAAA;AACH,CAAC,CAAA;AAED,MAAM,CAAC,KAAK,UAAU,0BAA0B,CAAC,UAA+B;IAC9E,MAAM,6BAA6B,CAAC,UAAU,CAAC,CAAA;AACjD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,6BAA6B,CAAC,UAA+B;IACjF,MAAM,qBAAqB,GAAG,CAC5B,MAAM,OAAO,CAAC,GAAG,CACf,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,EAAE,EAAE;QACjC,MAAM,QAAQ,GAAG,SAAS,CAAC,aAAa,EAAE,CAAA;QAC1C,OAAO,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YAClC,CAAC,CAAC,SAAS;YACX,CAAC,CAAC;gBACE,EAAE,EAAE,SAAS,CAAC,eAAe;gBAC7B,IAAI,EAAE,SAAS,CAAC,aAAa,EAAE;aAChC,CAAA;IACP,CAAC,CAAC,CACH,CACF,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,KAAK,SAAS,CAAiC,CAAA;IAChF,IAAI,qBAAqB,CAAC,MAAM,KAAK,CAAC,EAAE;QACtC,MAAM,wBAAwB,CAAC,qBAAqB,CAAC,CAAA;KACtD;AACH,CAAC","sourcesContent":["import {FunctionExtension} from '../../models/app/extensions.js'\nimport {file, output, error} from '@shopify/cli-kit'\n\nconst FunctionsWithMissingWasm = (extensions: {id: string; path: string}[]) => {\n  const extensionLine = (extension: {id: string; path: string}): string => {\n    return output.stringifyMessage(\n      output.content`Â· ${output.token.green(extension.id)}: ${output.token.path(extension.path)}`,\n    )\n  }\n  const extensionLines = output.token.raw(extensions.map(extensionLine).join('\\n'))\n  return new error.Abort(\n    output.content`The following function extensions haven't compiled the wasm in the expected path:\n  ${extensionLines}\n      `,\n    `Make sure the build command outputs the wasm in the expected directory.`,\n  )\n}\n\nexport async function validateFunctionExtensions(extensions: FunctionExtension[]) {\n  await validateFunctionsWasmPresence(extensions)\n}\n\nexport async function validateFunctionsWasmPresence(extensions: FunctionExtension[]) {\n  const extensionsWithoutWasm = (\n    await Promise.all(\n      extensions.map(async (extension) => {\n        const wasmPath = extension.buildWasmPath()\n        return (await file.exists(wasmPath))\n          ? undefined\n          : {\n              id: extension.localIdentifier,\n              path: extension.buildWasmPath(),\n            }\n      }),\n    )\n  ).filter((extension) => extension !== undefined) as {id: string; path: string}[]\n  if (extensionsWithoutWasm.length !== 0) {\n    throw FunctionsWithMissingWasm(extensionsWithoutWasm)\n  }\n}\n"]}