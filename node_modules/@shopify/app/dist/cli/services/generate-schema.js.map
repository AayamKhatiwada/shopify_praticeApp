{"version":3,"file":"generate-schema.js","sourceRoot":"","sources":["../../../src/cli/services/generate-schema.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,oCAAoC,EAAC,MAAM,kBAAkB,CAAA;AAGrE,OAAO,EAAC,iBAAiB,EAAC,MAAM,8BAA8B,CAAA;AAC9D,OAAO,EAAC,OAAO,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,WAAW,EAAC,MAAM,kBAAkB,CAAA;AAQzE,MAAM,CAAC,KAAK,UAAU,qBAAqB,CAAC,OAA8B;IACxE,MAAM,EAAC,SAAS,EAAE,GAAG,EAAC,GAAG,OAAO,CAAA;IAChC,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,2BAA2B,EAAE,CAAA;IACzD,MAAM,EAAC,UAAU,EAAE,OAAO,EAAE,IAAI,EAAC,GAAG,SAAS,CAAC,aAAa,CAAA;IAC3D,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,iBAAiB,CAAC,EAAC,GAAG,EAAC,CAAC,CAAC,GAAG,CAAA;IAE3D,IAAI,CAAC,MAAM,EAAE;QACX,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,qBAAqB,EAAE,EAAE;YAC9C,MAAM,IAAI,KAAK,CAAC,KAAK,CACnB,MAAM,CAAC,OAAO,CAAA,0BAA0B,EACxC,MAAM,CAAC,OAAO,CAAA,6CAA6C,CAC5D,CAAA;SACF;QAED,MAAM,GAAG,CAAC,MAAM,oCAAoC,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAA;KACrF;IAED,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,wBAAwB,CAAA;IAClD,MAAM,SAAS,GAAkD;QAC/D,MAAM;QACN,OAAO;QACP,IAAI;KACL,CAAA;IACD,MAAM,QAAQ,GAA+C,MAAM,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,CAAA;IAEhH,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE;QACxB,MAAM,IAAI,KAAK,CAAC,KAAK,CACnB,MAAM,CAAC,OAAO,CAAA,uCAAuC,SAAS,CAAC,eAAe,EAAE,EAChF,MAAM,CAAC,OAAO,CAAA,yDAAyD,CACxE,CAAA;KACF;IAED,OAAO,QAAQ,CAAC,UAAU,CAAA;AAC5B,CAAC","sourcesContent":["import {fetchOrganizationAndFetchOrCreateApp} from './environment.js'\nimport {AppInterface} from '../models/app/app.js'\nimport {FunctionExtension} from '../models/app/extensions.js'\nimport {getAppIdentifiers} from '../models/app/identifiers.js'\nimport {session, output, api, error, environment} from '@shopify/cli-kit'\n\ninterface GenerateSchemaOptions {\n  app: AppInterface\n  extension: FunctionExtension\n  apiKey?: string\n}\n\nexport async function generateSchemaService(options: GenerateSchemaOptions) {\n  const {extension, app} = options\n  const token = await session.ensureAuthenticatedPartners()\n  const {apiVersion: version, type} = extension.configuration\n  let apiKey = options.apiKey || getAppIdentifiers({app}).app\n\n  if (!apiKey) {\n    if (!environment.local.isTerminalInteractive()) {\n      throw new error.Abort(\n        output.content`No API key was provided.`,\n        output.content`Provide an API key with the --api-key flag.`,\n      )\n    }\n\n    apiKey = (await fetchOrganizationAndFetchOrCreateApp(app, token)).partnersApp.apiKey\n  }\n\n  const query = api.graphql.ApiSchemaDefinitionQuery\n  const variables: api.graphql.ApiSchemaDefinitionQueryVariables = {\n    apiKey,\n    version,\n    type,\n  }\n  const response: api.graphql.ApiSchemaDefinitionQuerySchema = await api.partners.request(query, token, variables)\n\n  if (!response.definition) {\n    throw new error.Abort(\n      output.content`A schema could not be generated for ${extension.localIdentifier}`,\n      output.content`Check that the Function API type and version are valid.`,\n    )\n  }\n\n  return response.definition\n}\n"]}