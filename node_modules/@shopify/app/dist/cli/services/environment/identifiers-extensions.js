import { manualMatchIds } from './id-manual-matching.js';
import { automaticMatchmaking } from './id-matching.js';
import { matchConfirmationPrompt } from './prompts.js';
import { createExtension } from '../dev/create-extension.js';
import { err, ok } from '@shopify/cli-kit/common/result';
import { output, session } from '@shopify/cli-kit';
export async function ensureExtensionsIds(options, remoteExtensions) {
    const validIdentifiers = options.envIdentifiers.extensions ?? {};
    const localExtensions = [...options.app.extensions.ui, ...options.app.extensions.theme];
    const matchExtensionsResult = await automaticMatchmaking(localExtensions, remoteExtensions, validIdentifiers, 'uuid');
    if (matchExtensionsResult.isErr())
        return err(matchExtensionsResult.error);
    const matchExtensions = matchExtensionsResult.value;
    let validMatches = matchExtensions.identifiers;
    const validMatchesById = {};
    for (const pending of matchExtensions.toConfirm) {
        // eslint-disable-next-line no-await-in-loop
        const confirmed = await matchConfirmationPrompt(pending.local, pending.remote);
        if (!confirmed)
            return err('user-cancelled');
        validMatches[pending.local.localIdentifier] = pending.remote.uuid;
    }
    const extensionsToCreate = matchExtensions.toCreate ?? [];
    if (matchExtensions.toManualMatch.local.length > 0) {
        const matchResult = await manualMatchIds(matchExtensions.toManualMatch, 'uuid');
        if (matchResult.result === 'pending-remote')
            return err('pending-remote');
        validMatches = { ...validMatches, ...matchResult.identifiers };
        extensionsToCreate.push(...matchResult.toCreate);
    }
    if (extensionsToCreate.length > 0) {
        const newIdentifiers = await createExtensions(extensionsToCreate, options.appId);
        for (const [localIdentifier, registration] of Object.entries(newIdentifiers)) {
            validMatches[localIdentifier] = registration.uuid;
            validMatchesById[localIdentifier] = registration.id;
        }
    }
    // For extensions we also need the match by ID, not only UUID (doesn't apply to functions)
    for (const [localIdentifier, uuid] of Object.entries(validMatches)) {
        const registration = remoteExtensions.find((registration) => registration.uuid === uuid);
        if (registration)
            validMatchesById[localIdentifier] = registration.id;
    }
    return ok({
        extensions: validMatches,
        extensionIds: validMatchesById,
    });
}
async function createExtensions(extensions, appId) {
    const token = await session.ensureAuthenticatedPartners();
    const result = {};
    for (const extension of extensions) {
        // Create one at a time to avoid API rate limiting issues.
        // eslint-disable-next-line no-await-in-loop
        const registration = await createExtension(appId, extension.type, extension.configuration.name, token);
        output.completed(`Created extension ${extension.configuration.name}.`);
        result[extension.localIdentifier] = registration;
    }
    return result;
}
//# sourceMappingURL=identifiers-extensions.js.map