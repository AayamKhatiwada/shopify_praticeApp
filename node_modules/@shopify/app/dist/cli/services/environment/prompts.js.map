{"version":3,"file":"prompts.js","sourceRoot":"","sources":["../../../../src/cli/services/environment/prompts.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,EAAE,EAAC,MAAM,kBAAkB,CAAA;AAEnC,MAAM,CAAC,KAAK,UAAU,uBAAuB,CAAC,KAAkB,EAAE,MAAoB;IACpF,MAAM,OAAO,GAAG;QACd,EAAC,IAAI,EAAE,mBAAmB,EAAE,KAAK,EAAE,KAAK,EAAC;QACzC,EAAC,IAAI,EAAE,uBAAuB,EAAE,KAAK,EAAE,IAAI,EAAC;KAC7C,CAAA;IACD,MAAM,MAAM,GAAoB,MAAM,EAAE,CAAC,MAAM,CAAC;QAC9C;YACE,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,OAAO;YACb,OAAO,EAAE,UAAU,KAAK,CAAC,aAAa,CAAC,IAAI,oBAAoB,MAAM,CAAC,KAAK,mCAAmC,MAAM,CAAC,EAAE,IAAI;YAC3H,OAAO;SACR;KACF,CAAC,CAAA;IACF,OAAO,MAAM,CAAC,KAAK,KAAK,KAAK,CAAA;AAC/B,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAC5C,WAAwB,EACxB,uBAAuC,EACvC,aAA4B;IAE5B,MAAM,aAAa,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAC7D,IAAI,EAAE,eAAe,MAAM,CAAC,KAAK,SAAS,MAAM,CAAC,EAAE,uBAAuB;QAC1E,KAAK,EAAE,MAAM,CAAC,aAAa,CAAC;KAC7B,CAAC,CAAC,CAAA;IACH,aAAa,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,sBAAsB,EAAE,KAAK,EAAE,QAAQ,EAAC,CAAC,CAAA;IACnE,MAAM,MAAM,GAAmB,MAAM,EAAE,CAAC,MAAM,CAAC;QAC7C;YACE,IAAI,EAAE,cAAc;YACpB,IAAI,EAAE,MAAM;YACZ,OAAO,EAAE,sCAAsC,WAAW,CAAC,aAAa,CAAC,IAAI,IAAI;YACjF,OAAO,EAAE,aAAa;SACvB;KACF,CAAC,CAAA;IACF,OAAO,uBAAuB,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,KAAK,MAAM,CAAC,IAAI,CAAE,CAAA;AACzF,CAAC","sourcesContent":["import {LocalSource, RemoteSource} from './identifiers.js'\nimport {ui} from '@shopify/cli-kit'\n\nexport async function matchConfirmationPrompt(local: LocalSource, remote: RemoteSource) {\n  const choices = [\n    {name: `Yes, that's right`, value: 'yes'},\n    {name: `No, cancel deployment`, value: 'no'},\n  ]\n  const choice: {value: string} = await ui.prompt([\n    {\n      type: 'select',\n      name: 'value',\n      message: `Deploy ${local.configuration.name} (local name) as ${remote.title} (name on Shopify Partners, ID: ${remote.id})?`,\n      choices,\n    },\n  ])\n  return choice.value === 'yes'\n}\n\nexport async function selectRemoteSourcePrompt(\n  localSource: LocalSource,\n  remoteSourcesOfSameType: RemoteSource[],\n  remoteIdField: 'id' | 'uuid',\n): Promise<RemoteSource> {\n  const remoteOptions = remoteSourcesOfSameType.map((remote) => ({\n    name: `Match it to ${remote.title} (ID: ${remote.id} on Shopify Partners)`,\n    value: remote[remoteIdField],\n  }))\n  remoteOptions.push({name: 'Create new extension', value: 'create'})\n  const choice: {uuid: string} = await ui.prompt([\n    {\n      type: 'autocomplete',\n      name: 'uuid',\n      message: `How would you like to deploy your \"${localSource.configuration.name}\"?`,\n      choices: remoteOptions,\n    },\n  ])\n  return remoteSourcesOfSameType.find((remote) => remote[remoteIdField] === choice.uuid)!\n}\n"]}