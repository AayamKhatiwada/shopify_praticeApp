import { api, error, output } from '@shopify/cli-kit';
export const NoOrgError = (organizationId) => {
    const nextSteps = [
        output.content `Have you ${output.token.link('created a Shopify Partners organization', 'https://partners.shopify.com/signup')}?`,
        output.content `Have you confirmed your accounts from the emails you received?`,
        output.content `Need to connect to a different App or organization? Run the command again with ${output.token.genericShellCommand('--reset')}`,
    ];
    if (organizationId) {
        nextSteps.push(output.content `Do you have access to the right Shopify Partners organization? The CLI is loading ${output.token.link('this organization', `https://partner.shopify.com/${organizationId}`)}`);
    }
    return new error.Abort(`No Organization found`, nextSteps.map((content) => `Â· ${output.stringifyMessage(content)}`).join('\n'));
};
export async function fetchAppExtensionRegistrations({ token, apiKey, }) {
    const query = api.graphql.AllAppExtensionRegistrationsQuery;
    const result = await api.partners.request(query, token, {
        apiKey,
    });
    return result;
}
/**
 * Fetch all organizations the user belongs to
 * If the user doesn't belong to any org, throw an error
 * @param token - Token to access partners API
 * @returns List of organizations
 */
export async function fetchOrganizations(token) {
    const query = api.graphql.AllOrganizationsQuery;
    const result = await api.partners.request(query, token);
    const organizations = result.organizations.nodes;
    if (organizations.length === 0)
        throw NoOrgError();
    return organizations;
}
/**
 * Fetch all apps and stores for the given organization
 * @param orgId - Organization ID
 * @param token - Token to access partners API
 * @returns Current organization details and list of apps and stores
 */
export async function fetchOrgAndApps(orgId, token) {
    const query = api.graphql.FindOrganizationQuery;
    const result = await api.partners.request(query, token, { id: orgId });
    const org = result.organizations.nodes[0];
    if (!org)
        throw NoOrgError(orgId);
    const parsedOrg = { id: org.id, businessName: org.businessName, appsNext: org.appsNext };
    return { organization: parsedOrg, apps: org.apps.nodes, stores: [] };
}
export async function fetchAppFromApiKey(apiKey, token) {
    const res = await api.partners.request(api.graphql.FindAppQuery, token, { apiKey });
    return res.app;
}
export async function fetchOrgFromId(id, token) {
    const query = api.graphql.FindOrganizationBasicQuery;
    const res = await api.partners.request(query, token, { id });
    return res.organizations.nodes[0];
}
export async function fetchAllStores(orgId, token) {
    const query = api.graphql.AllStoresByOrganizationQuery;
    const result = await api.partners.request(query, token, { id: orgId });
    return result.organizations.nodes[0].stores.nodes;
}
/**
 * Returns the organization and the store based on passed domain
 * If a store with that domain doesn't exist the method returns undefined
 * @param orgId - Organization ID
 * @param token - Token to access partners API
 * @param shopDomain - shop domain fqdn
 */
export async function fetchStoreByDomain(orgId, token, shopDomain) {
    const query = api.graphql.FindStoreByDomainQuery;
    const result = await api.partners.request(query, token, {
        id: orgId,
        shopDomain,
    });
    const org = result.organizations.nodes[0];
    if (!org) {
        return undefined;
    }
    const parsedOrg = { id: org.id, businessName: org.businessName, appsNext: org.appsNext };
    const store = org.stores.nodes[0];
    return { organization: parsedOrg, store };
}
//# sourceMappingURL=fetch.js.map