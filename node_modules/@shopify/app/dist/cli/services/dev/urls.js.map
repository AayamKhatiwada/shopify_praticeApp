{"version":3,"file":"urls.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/urls.ts"],"names":[],"mappings":"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","sourcesContent":["import {updateURLsPrompt} from '../../prompts/dev.js'\nimport {AppInterface} from '../../models/app/app.js'\nimport {api, environment, output, plugins, port, store} from '@shopify/cli-kit'\nimport {AbortError, AbortSilentError, BugError} from '@shopify/cli-kit/node/error'\nimport {Config} from '@oclif/core'\n\nexport interface PartnersURLs {\n  applicationUrl: string\n  redirectUrlWhitelist: string[]\n}\n\nexport interface FrontendURLOptions {\n  app: AppInterface\n  tunnel: boolean\n  noTunnel: boolean\n  tunnelUrl?: string\n  cachedTunnelPlugin?: string\n  commandConfig: Config\n}\n\nexport interface FrontendURLResult {\n  frontendUrl: string\n  frontendPort: number\n  usingLocalhost: boolean\n}\n\n/**\n * The tunnel creation logic depends on 7 variables:\n * - If a Codespaces environment is deteced, then the URL is built using the codespaces hostname. No need for tunnel\n * - If a Gitpod environment is detected, then the URL is built using the gitpod hostname. No need for tunnel\n * - If a Spin environment is detected, then the URL is built using the cli + fqdn hostname as configured in nginx.\n *   No need for tunnel. In case problems with that configuration, the flags Tunnel or Custom Tunnel url could be used\n * - If a tunnelUrl is provided, that takes preference and is returned as the frontendURL\n * - If noTunnel is true, that takes second preference and localhost is used\n * - A Tunnel is created then if any of these conditions are met:\n *   - Tunnel flag is true\n *   - The app has UI extensions\n *   - In a previous run, the user selected to always use a tunnel (cachedTunnelPlugin)\n * - Otherwise, localhost is used\n *\n * If there is no cached tunnel plugin and a tunnel is necessary, we'll ask the user to confirm.\n */\nexport async function generateFrontendURL(options: FrontendURLOptions): Promise<FrontendURLResult> {\n  let frontendPort = 4040\n  let frontendUrl: string\n  let usingLocalhost = false\n  const hasExtensions = options.app.hasUIExtensions()\n\n  const needsTunnel = (hasExtensions || options.tunnel || options.cachedTunnelPlugin) && !options.noTunnel\n\n  if (environment.local.codespaceURL()) {\n    frontendUrl = `https://${environment.local.codespaceURL()}-${frontendPort}.githubpreview.dev`\n    return {frontendUrl, frontendPort, usingLocalhost}\n  }\n\n  if (environment.local.gitpodURL()) {\n    const defaultUrl = environment.local.gitpodURL()?.replace('https://', '')\n    frontendUrl = `https://${frontendPort}-${defaultUrl}`\n    return {frontendUrl, frontendPort, usingLocalhost}\n  }\n\n  if (environment.spin.isSpin() && !options.tunnelUrl) {\n    frontendUrl = `https://cli.${await environment.spin.fqdn()}`\n    return {frontendUrl, frontendPort, usingLocalhost}\n  }\n\n  if (options.tunnelUrl) {\n    const matches = options.tunnelUrl.match(/(https:\\/\\/[^:]+):([0-9]+)/)\n    if (!matches) {\n      throw new AbortError(`Invalid tunnel URL: ${options.tunnelUrl}`, 'Valid format: \"https://my-tunnel-url:port\"')\n    }\n    frontendPort = Number(matches[2])\n    frontendUrl = matches[1]!\n    return {frontendUrl, frontendPort, usingLocalhost}\n  }\n\n  if (needsTunnel) {\n    frontendPort = await port.getRandomPort()\n    frontendUrl = await generateURL(options.commandConfig, frontendPort)\n  } else {\n    frontendPort = await port.getRandomPort()\n    frontendUrl = 'http://localhost'\n    usingLocalhost = true\n  }\n\n  return {frontendUrl, frontendPort, usingLocalhost}\n}\n\nexport async function generateURL(config: Config, frontendPort: number): Promise<string> {\n  // For the moment we assume to always have ngrok, this will change in a future PR\n  // and will need to use \"getListOfTunnelPlugins\" to find the available tunnel plugins\n  const provider = 'ngrok'\n  return (await plugins.runTunnelPlugin(config, frontendPort, provider))\n    .doOnOk(() => output.success('The tunnel is running and you can now view your app'))\n    .mapError(mapRunTunnelPluginError)\n    .valueOrThrow()\n}\n\nexport function generatePartnersURLs(baseURL: string, authCallbackPath?: string): PartnersURLs {\n  let redirectUrlWhitelist: string[]\n  if (authCallbackPath && authCallbackPath.length > 0) {\n    redirectUrlWhitelist = [`${baseURL}${authCallbackPath}`]\n  } else {\n    redirectUrlWhitelist = [\n      `${baseURL}/auth/callback`,\n      `${baseURL}/auth/shopify/callback`,\n      `${baseURL}/api/auth/callback`,\n    ]\n  }\n\n  return {\n    applicationUrl: baseURL,\n    redirectUrlWhitelist,\n  }\n}\n\nexport async function updateURLs(urls: PartnersURLs, apiKey: string, token: string): Promise<void> {\n  const variables: api.graphql.UpdateURLsQueryVariables = {apiKey, ...urls}\n  const query = api.graphql.UpdateURLsQuery\n  const result: api.graphql.UpdateURLsQuerySchema = await api.partners.request(query, token, variables)\n  if (result.appUpdate.userErrors.length > 0) {\n    const errors = result.appUpdate.userErrors.map((error) => error.message).join(', ')\n    throw new AbortError(errors)\n  }\n}\n\nexport async function getURLs(apiKey: string, token: string): Promise<PartnersURLs> {\n  const variables: api.graphql.GetURLsQueryVariables = {apiKey}\n  const query = api.graphql.GetURLsQuery\n  const result: api.graphql.GetURLsQuerySchema = await api.partners.request(query, token, variables)\n  return {applicationUrl: result.app.applicationUrl, redirectUrlWhitelist: result.app.redirectUrlWhitelist}\n}\n\nexport interface ShouldOrPromptUpdateURLsOptions {\n  currentURLs: PartnersURLs\n  appDirectory: string\n  cachedUpdateURLs?: boolean\n  newApp?: boolean\n}\n\nexport async function shouldOrPromptUpdateURLs(options: ShouldOrPromptUpdateURLsOptions): Promise<boolean> {\n  if (options.newApp) return true\n  let shouldUpdate: boolean = options.cachedUpdateURLs === true\n  if (options.cachedUpdateURLs === undefined) {\n    output.info(`\\nYour app's URL currently is:\\n  ${options.currentURLs.applicationUrl}`)\n    output.info(`\\nYour app's redirect URLs currently are:`)\n    options.currentURLs.redirectUrlWhitelist.forEach((url) => output.info(`  ${url}`))\n    output.newline()\n    const response = await updateURLsPrompt()\n    let newUpdateURLs: boolean | undefined\n    /* eslint-disable no-fallthrough */\n    switch (response) {\n      case 'always':\n        newUpdateURLs = true\n      case 'yes':\n        shouldUpdate = true\n        break\n      case 'never':\n        newUpdateURLs = false\n      case 'no':\n        shouldUpdate = false\n    }\n    /* eslint-enable no-fallthrough */\n    await store.setAppInfo({directory: options.appDirectory, updateURLs: newUpdateURLs})\n  }\n  return shouldUpdate\n}\n\nfunction mapRunTunnelPluginError(tunnelPluginError: plugins.TunnelPluginError) {\n  switch (tunnelPluginError.type) {\n    case 'no-provider':\n      return new BugError(`We couldn't find the ${tunnelPluginError.provider} tunnel plugin`)\n    case 'multiple-urls':\n      return new BugError('Multiple tunnel plugins for ngrok found')\n    case 'unknown':\n      return new BugError(`${tunnelPluginError.provider} failed to start the tunnel.\\n${tunnelPluginError.message}`)\n    default:\n      return new AbortSilentError()\n  }\n}\n"]}