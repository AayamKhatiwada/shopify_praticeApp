{"version":3,"file":"select-app.js","sourceRoot":"","sources":["../../../../src/cli/services/dev/select-app.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,kBAAkB,EAAC,MAAM,YAAY,CAAA;AAC7C,OAAO,EAAC,aAAa,EAAE,aAAa,EAAE,oBAAoB,EAAE,eAAe,EAAC,MAAM,sBAAsB,CAAA;AAGxG,OAAO,EAAC,GAAG,EAAE,KAAK,EAAE,MAAM,EAAC,MAAM,kBAAkB,CAAA;AAEnD;;;;;;;;;;GAUG;AACH,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,QAAsB,EACtB,IAAuB,EACvB,GAAiB,EACjB,KAAa,EACb,YAAqB;IAErB,IAAI,YAAY,EAAE;QAChB,MAAM,SAAS,GAAG,MAAM,kBAAkB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAA;QAC/D,IAAI,SAAS;YAAE,OAAO,SAAS,CAAA;KAChC;IAED,IAAI,YAAY,GAAG,IAAI,CAAC,MAAM,KAAK,CAAC,CAAA;IACpC,IAAI,CAAC,YAAY,EAAE;QACjB,MAAM,CAAC,IAAI,CAAC,0EAA0E,CAAC,CAAA;QACvF,YAAY,GAAG,MAAM,oBAAoB,EAAE,CAAA;KAC5C;IACD,MAAM,GAAG,GAAG,YAAY,CAAC,CAAC,CAAC,MAAM,SAAS,CAAC,GAAG,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,eAAe,CAAC,IAAI,CAAC,CAAA;IAC9F,OAAO,GAAG,CAAA;AACZ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,SAAS,CAAC,GAAiB,EAAE,GAAiB,EAAE,KAAa;IACjF,MAAM,IAAI,GAAG,MAAM,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;IAE1C,MAAM,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,MAAM,aAAa,EAAE,CAAA;IAC/D,MAAM,SAAS,GAAwC;QACrD,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,CAAC;QACzB,KAAK,EAAE,GAAG,IAAI,EAAE;QAChB,MAAM,EAAE,qBAAqB;QAC7B,KAAK,EAAE,CAAC,8BAA8B,CAAC;QACvC,IAAI;KACL,CAAA;IAED,MAAM,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,cAAc,CAAA;IACxC,MAAM,MAAM,GAAqC,MAAM,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,EAAE,SAAS,CAAC,CAAA;IACpG,IAAI,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QAC1C,MAAM,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;QACnF,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,MAAM,CAAC,CAAA;KAC9B;IAED,MAAM,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,4CAA4C,CAAC,CAAA;IACzF,MAAM,UAAU,GAAoB,MAAM,CAAC,SAAS,CAAC,GAAG,CAAA;IACxD,UAAU,CAAC,cAAc,GAAG,GAAG,CAAC,EAAE,CAAA;IAClC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAA;IACxB,OAAO,UAAU,CAAA;AACnB,CAAC","sourcesContent":["import {fetchAppFromApiKey} from './fetch.js'\nimport {appNamePrompt, appTypePrompt, createAsNewAppPrompt, selectAppPrompt} from '../../prompts/dev.js'\nimport {AppInterface} from '../../models/app/app.js'\nimport {Organization, OrganizationApp} from '../../models/organization.js'\nimport {api, error, output} from '@shopify/cli-kit'\n\n/**\n * Select an app from env, list or create a new one:\n * If a cachedAppId is provided, we check if it is valid and return it. If it's not valid, ignore it.\n * If there is no valid app yet, prompt the user to select one from the list or create a new one.\n * If no apps exists, we automatically prompt the user to create a new one.\n * @param app - Current local app information\n * @param apps - List of remote available apps\n * @param orgId - Current Organization\n * @param cachedAppId - Cached app apikey\n * @returns The selected (or created) app\n */\nexport async function selectOrCreateApp(\n  localApp: AppInterface,\n  apps: OrganizationApp[],\n  org: Organization,\n  token: string,\n  cachedApiKey?: string,\n): Promise<OrganizationApp> {\n  if (cachedApiKey) {\n    const cachedApp = await fetchAppFromApiKey(cachedApiKey, token)\n    if (cachedApp) return cachedApp\n  }\n\n  let createNewApp = apps.length === 0\n  if (!createNewApp) {\n    output.info(`\\nBefore you preview your work, it needs to be associated with an app.\\n`)\n    createNewApp = await createAsNewAppPrompt()\n  }\n  const app = createNewApp ? await createApp(org, localApp, token) : await selectAppPrompt(apps)\n  return app\n}\n\nexport async function createApp(org: Organization, app: AppInterface, token: string): Promise<OrganizationApp> {\n  const name = await appNamePrompt(app.name)\n\n  const type = org.appsNext ? 'undecided' : await appTypePrompt()\n  const variables: api.graphql.CreateAppQueryVariables = {\n    org: parseInt(org.id, 10),\n    title: `${name}`,\n    appUrl: 'https://example.com',\n    redir: ['https://example.com/api/auth'],\n    type,\n  }\n\n  const query = api.graphql.CreateAppQuery\n  const result: api.graphql.CreateAppQuerySchema = await api.partners.request(query, token, variables)\n  if (result.appCreate.userErrors.length > 0) {\n    const errors = result.appCreate.userErrors.map((error) => error.message).join(', ')\n    throw new error.Abort(errors)\n  }\n\n  output.success(`${result.appCreate.app.title} has been created on your Partners account`)\n  const createdApp: OrganizationApp = result.appCreate.app\n  createdApp.organizationId = org.id\n  createdApp.newApp = true\n  return createdApp\n}\n"]}