{"version":3,"file":"payload.js","sourceRoot":"","sources":["../../../../../src/cli/services/dev/extension/payload.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,eAAe,EAAC,MAAM,mBAAmB,CAAA;AAEjD,OAAO,EAAC,yBAAyB,EAAE,qBAAqB,EAAC,MAAM,gDAAgD,CAAA;AAC/G,OAAO,EAAC,uCAAuC,EAAC,MAAM,8CAA8C,CAAA;AAGpG,OAAO,EAAC,6BAA6B,EAAC,MAAM,4BAA4B,CAAA;AACxE,OAAO,EAAC,IAAI,EAAC,MAAM,kBAAkB,CAAA;AAOrC,MAAM,CAAC,KAAK,UAAU,qBAAqB,CACzC,SAAsB,EACtB,OAAqC;IAErC,MAAM,GAAG,GAAG,GAAG,OAAO,CAAC,GAAG,eAAe,SAAS,CAAC,OAAO,EAAE,CAAA;IAC5D,MAAM,EAAC,YAAY,EAAE,MAAM,EAAE,kBAAkB,EAAC,GAAG,MAAM,eAAe,CACtE,SAAS,EACT,OAAO,CAAC,0BAA0B,CACnC,CAAA;IAED,MAAM,QAAQ,GAAG,MAAM,6BAA6B,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC,CAAA;IAC/F,OAAO;QACL,MAAM,EAAE;YACN,IAAI,EAAE;gBACJ,IAAI,EAAE,MAAM;gBACZ,GAAG,EAAE,GAAG,GAAG,iBAAiB;gBAC5B,WAAW,EAAE,CAAC,MAAM,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,IAAI,CAAC;aAChF;SACF;QACD,YAAY,EAAE;YACZ,aAAa,EAAE,SAAS,CAAC,aAAa,CAAC,YAAY,EAAE,cAAc,IAAI,KAAK;YAC5E,aAAa,EAAE,SAAS,CAAC,aAAa,CAAC,YAAY,EAAE,cAAc,IAAI,KAAK;SAC7E;QACD,WAAW,EAAE;YACX,GAAG,OAAO,CAAC,yBAAyB;YACpC,QAAQ,EAAE,yBAAyB,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,EAAE,OAAO,CAAC;YAC1E,IAAI,EAAE;gBACJ,GAAG;aACJ;YAED,MAAM,EAAE,OAAO,CAAC,yBAAyB,EAAE,MAAM,IAAI,KAAK;YAC1D,kBAAkB;YAClB,MAAM,EAAE,OAAO,CAAC,yBAAyB,EAAE,MAAM,IAAI,SAAS;YAC9D,GAAG,CAAC,OAAO,CAAC,yBAAyB,IAAI,EAAC,MAAM,EAAE,SAAS,EAAC,CAAC;SAC9D;QACD,eAAe,EAAE,SAAS,CAAC,aAAa,CAAC,eAAe,IAAI,IAAI;QAChE,YAAY,EAAE,YAAY,IAAI,IAAI;QAClC,UAAU,EAAE,SAAS,CAAC,aAAa,CAAC,UAAU,IAAI,IAAI;QACtD,UAAU,EAAE,SAAS,CAAC,aAAa,CAAC,UAAU,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,UAAU;QACvG,IAAI,EAAE,SAAS,CAAC,aAAa,CAAC,IAAI;QAElC,YAAY,EAAE,uCAAuC,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC;QACnF,IAAI,EAAE,SAAS,CAAC,OAAO;QAEvB,OAAO,EAAE,qBAAqB,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC;QAE5D,6DAA6D;QAC7D,aAAa;QACb,OAAO,EAAE,QAAQ,EAAE,OAAO;QAE1B,KAAK,EAAE,SAAS,CAAC,aAAa,CAAC,IAAI;QACnC,cAAc,EAAE,OAAO,CAAC,aAAa;KACtC,CAAA;AACH,CAAC","sourcesContent":["import {getLocalization} from './localization.js'\nimport {UIExtensionPayload} from './payload/models.js'\nimport {getUIExtensionResourceURL, getUIExtensionSurface} from '../../../utilities/extensions/configuration.js'\nimport {mapExtensionTypeToExternalExtensionType} from '../../../utilities/extensions/name-mapper.js'\nimport {ExtensionDevOptions} from '../extension.js'\nimport {UIExtension} from '../../../models/app/extensions.js'\nimport {getUIExtensionRendererVersion} from '../../../models/app/app.js'\nimport {file} from '@shopify/cli-kit'\n\ntype GetUIExtensionPayloadOptions = ExtensionDevOptions & {\n  currentDevelopmentPayload?: Partial<UIExtensionPayload['development']>\n  currentLocalizationPayload?: UIExtensionPayload['localization']\n}\n\nexport async function getUIExtensionPayload(\n  extension: UIExtension,\n  options: GetUIExtensionPayloadOptions,\n): Promise<UIExtensionPayload> {\n  const url = `${options.url}/extensions/${extension.devUUID}`\n  const {localization, status: localizationStatus} = await getLocalization(\n    extension,\n    options.currentLocalizationPayload,\n  )\n\n  const renderer = await getUIExtensionRendererVersion(extension.configuration.type, options.app)\n  return {\n    assets: {\n      main: {\n        name: 'main',\n        url: `${url}/assets/main.js`,\n        lastUpdated: (await file.lastUpdatedTimestamp(extension.outputBundlePath)) ?? 0,\n      },\n    },\n    capabilities: {\n      blockProgress: extension.configuration.capabilities?.block_progress || false,\n      networkAccess: extension.configuration.capabilities?.network_access || false,\n    },\n    development: {\n      ...options.currentDevelopmentPayload,\n      resource: getUIExtensionResourceURL(extension.configuration.type, options),\n      root: {\n        url,\n      },\n\n      hidden: options.currentDevelopmentPayload?.hidden || false,\n      localizationStatus,\n      status: options.currentDevelopmentPayload?.status || 'success',\n      ...(options.currentDevelopmentPayload || {status: 'success'}),\n    },\n    extensionPoints: extension.configuration.extensionPoints ?? null,\n    localization: localization ?? null,\n    categories: extension.configuration.categories ?? null,\n    metafields: extension.configuration.metafields.length === 0 ? null : extension.configuration.metafields,\n    type: extension.configuration.type,\n\n    externalType: mapExtensionTypeToExternalExtensionType(extension.configuration.type),\n    uuid: extension.devUUID,\n\n    surface: getUIExtensionSurface(extension.configuration.type),\n\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    version: renderer?.version,\n\n    title: extension.configuration.name,\n    approvalScopes: options.grantedScopes,\n  }\n}\n"]}