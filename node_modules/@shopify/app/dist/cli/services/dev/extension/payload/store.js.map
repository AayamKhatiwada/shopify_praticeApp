{"version":3,"file":"store.js","sourceRoot":"","sources":["../../../../../../src/cli/services/dev/extension/payload/store.ts"],"names":[],"mappings":"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","sourcesContent":["import {UIExtensionPayload, ExtensionsEndpointPayload} from './models.js'\nimport {ExtensionDevOptions} from '../../extension.js'\nimport {getUIExtensionPayload} from '../payload.js'\nimport {UIExtension} from '../../../../models/app/extensions.js'\nimport {deepMergeObjects} from '@shopify/cli-kit/common/object'\nimport {output} from '@shopify/cli-kit'\nimport {EventEmitter} from 'node:events'\n\nexport interface ExtensionsPayloadStoreOptions extends ExtensionDevOptions {\n  websocketURL: string\n}\n\nexport enum ExtensionsPayloadStoreEvent {\n  Update = 'PayloadUpdatedEvent:UPDATE',\n}\n\nexport async function getExtensionsPayloadStoreRawPayload(\n  options: ExtensionsPayloadStoreOptions,\n): Promise<ExtensionsEndpointPayload> {\n  return {\n    app: {\n      apiKey: options.apiKey,\n    },\n    version: '3',\n    root: {\n      url: new URL('/extensions', options.url).toString(),\n    },\n    socket: {\n      url: options.websocketURL,\n    },\n    devConsole: {\n      url: new URL('/extensions/dev-console', options.url).toString(),\n    },\n    store: options.storeFqdn,\n    extensions: await Promise.all(options.extensions.map((extension) => getUIExtensionPayload(extension, options))),\n  }\n}\n\nexport class ExtensionsPayloadStore extends EventEmitter {\n  private options: ExtensionsPayloadStoreOptions\n  private rawPayload: ExtensionsEndpointPayload\n\n  constructor(rawPayload: ExtensionsEndpointPayload, options: ExtensionsPayloadStoreOptions) {\n    super()\n    this.rawPayload = rawPayload\n    this.options = options\n  }\n\n  getConnectedPayload() {\n    const rawPayload = this.getRawPayload()\n    return {\n      app: rawPayload.app,\n      store: rawPayload.store,\n      extensions: rawPayload.extensions,\n    }\n  }\n\n  getRawPayloadFilteredByExtensionIds(extensionIds: string[]) {\n    return {\n      ...this.rawPayload,\n      extensions: this.rawPayload.extensions.filter((extension) => extensionIds.includes(extension.uuid)),\n    }\n  }\n\n  getRawPayload() {\n    return this.rawPayload\n  }\n\n  updateApp(app: Partial<ExtensionsEndpointPayload> & {[key: string]: unknown}) {\n    this.rawPayload = deepMergeObjects(this.rawPayload, {\n      app,\n    })\n    this.emitUpdate([])\n  }\n\n  updateExtensions(extensions: UIExtensionPayload[]) {\n    const updatedExtensionsPayload = this.rawPayload.extensions.map((rawPayloadExtension) => {\n      const foundExtension = extensions.find((ext) => ext.uuid === rawPayloadExtension.uuid)\n      if (foundExtension) {\n        return deepMergeObjects(rawPayloadExtension, foundExtension)\n      } else {\n        return rawPayloadExtension\n      }\n    })\n    this.rawPayload = {\n      ...this.rawPayload,\n      extensions: updatedExtensionsPayload,\n    }\n    this.emitUpdate(extensions.map((extension) => extension.uuid))\n  }\n\n  async updateExtension(extension: UIExtension, development?: Partial<UIExtensionPayload['development']>) {\n    const payloadExtensions = this.rawPayload.extensions\n    const index = payloadExtensions.findIndex((extensionPayload) => extensionPayload.uuid === extension.devUUID)\n\n    if (index === -1) {\n      output.debug(output.content`Could not updateExtension() for extension with uuid: ${extension.devUUID}`)\n      return\n    }\n\n    payloadExtensions[index] = await getUIExtensionPayload(extension, {\n      ...this.options,\n      currentDevelopmentPayload: development || {status: payloadExtensions[index]?.development.status},\n      currentLocalizationPayload: payloadExtensions[index]?.localization,\n    })\n\n    this.rawPayload.extensions = payloadExtensions\n\n    this.emitUpdate([extension.devUUID])\n  }\n\n  private emitUpdate(extensionIds: string[]) {\n    this.emit(ExtensionsPayloadStoreEvent.Update, extensionIds)\n  }\n}\n"]}