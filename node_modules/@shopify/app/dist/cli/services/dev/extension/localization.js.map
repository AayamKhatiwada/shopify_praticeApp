{"version":3,"file":"localization.js","sourceRoot":"","sources":["../../../../../src/cli/services/dev/extension/localization.ts"],"names":[],"mappings":"AAEA,OAAO,EAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAC,MAAM,kBAAkB,CAAA;AAanD,MAAM,CAAC,KAAK,UAAU,wBAAwB,CAAC,SAAsB;IACnE,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,SAAS,CAAC,CAAA;IAC5D,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAA;AACrD,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,eAAe,CACnC,SAAsB,EACtB,oBAA0C;IAE1C,MAAM,WAAW,GAAG,MAAM,wBAAwB,CAAC,SAAS,CAAC,CAAA;IAE7D,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;QACvB,OAAO,EAAC,YAAY,EAAE,SAAS,EAAE,MAAM,EAAE,EAAE,EAAC,CAAA;KAC7C;IAED,MAAM,YAAY,GAAG,oBAAoB;QACvC,CAAC,CAAC,oBAAoB;QACtB,CAAC,CAAE;YACC,aAAa,EAAE,IAAI;YACnB,YAAY,EAAE,EAAE;YAChB,WAAW,EAAE,CAAC;SACE,CAAA;IAEtB,MAAM,qBAAqB,GAAG,EAAE,CAAA;IAEhC,KAAK,MAAM,IAAI,IAAI,WAAW,EAAE;QAC9B,MAAM,CAAC,MAAM,EAAE,GAAG,gBAAgB,CAAC,GAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAa,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;QAElF,IAAI,MAAM,EAAE;YACV,IAAI,gBAAgB,CAAC,CAAC,CAAC,KAAK,SAAS,EAAE;gBACrC,YAAY,CAAC,aAAa,GAAG,MAAM,CAAA;aACpC;YAED,qBAAqB,CAAC,IAAI,CAAC,wBAAwB,CAAC,MAAM,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,CAAC,CAAC,CAAA;SAC5F;KACF;IAED,IAAI,MAAM,GAA8B,SAAS,CAAA;IAEjD,MAAM,OAAO,CAAC,GAAG,CAAC,qBAAqB,CAAC;SACrC,IAAI,CAAC,KAAK,IAAI,EAAE;QACf,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAA;QACrC,MAAM,CAAC,IAAI,CAAC,gCAAgC,SAAS,CAAC,aAAa,CAAC,IAAI,OAAO,SAAS,CAAC,SAAS,EAAE,CAAC,CAAA;IACvG,CAAC,CAAC;SACD,KAAK,CAAC,GAAG,EAAE;QACV,MAAM,GAAG,OAAO,CAAA;IAClB,CAAC,CAAC,CAAA;IAEJ,OAAO;QACL,YAAY;QACZ,MAAM;KACP,CAAA;AACH,CAAC;AAED,KAAK,UAAU,wBAAwB,CACrC,MAAc,EACd,IAAY,EACZ,YAA0B,EAC1B,SAAsB;IAEtB,IAAI;QACF,YAAY,CAAC,YAAY,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;QACrE,8DAA8D;KAC/D;IAAC,OAAO,KAAU,EAAE;QACnB,MAAM,OAAO,GAAG,iBAAiB,MAAM,eAAe,SAAS,CAAC,aAAa,CAAC,IAAI,OAAO,IAAI,KAAK,KAAK,CAAC,OAAO,EAAE,CAAA;QACjH,MAAM,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAA;QAC1B,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAA;KACzB;AACH,CAAC","sourcesContent":["import {ExtensionAssetBuildStatus} from './payload/models.js'\nimport {UIExtension} from '../../../models/app/extensions.js'\nimport {path, file, output} from '@shopify/cli-kit'\n\nexport type Locale = string\n\nexport interface Localization {\n  // TOOD: Should this be strongly typed?\n  defaultLocale: Locale\n  translations: {\n    [key: Locale]: {[key: string]: string}\n  }\n  lastUpdated: number\n}\n\nexport async function getLocalizationFilePaths(extension: UIExtension): Promise<string[]> {\n  const localePath = path.join(extension.directory, 'locales')\n  return path.glob([path.join(localePath, '*.json')])\n}\n\nexport async function getLocalization(\n  extension: UIExtension,\n  currentLocalizattion?: Localization | null,\n): Promise<{localization: Localization | undefined; status: ExtensionAssetBuildStatus}> {\n  const localeFiles = await getLocalizationFilePaths(extension)\n\n  if (!localeFiles.length) {\n    return {localization: undefined, status: ''}\n  }\n\n  const localization = currentLocalizattion\n    ? currentLocalizattion\n    : ({\n        defaultLocale: 'en',\n        translations: {},\n        lastUpdated: 0,\n      } as Localization)\n\n  const compilingTranslations = []\n\n  for (const path of localeFiles) {\n    const [locale, ...fileNameSegments] = (path.split('/').pop() as string).split('.')\n\n    if (locale) {\n      if (fileNameSegments[0] === 'default') {\n        localization.defaultLocale = locale\n      }\n\n      compilingTranslations.push(compileLocalizationFiles(locale, path, localization, extension))\n    }\n  }\n\n  let status: ExtensionAssetBuildStatus = 'success'\n\n  await Promise.all(compilingTranslations)\n    .then(async () => {\n      localization.lastUpdated = Date.now()\n      output.info(`Parsed locales for extension ${extension.configuration.name} at ${extension.directory}`)\n    })\n    .catch(() => {\n      status = 'error'\n    })\n\n  return {\n    localization,\n    status,\n  }\n}\n\nasync function compileLocalizationFiles(\n  locale: string,\n  path: string,\n  localization: Localization,\n  extension: UIExtension,\n): Promise<void> {\n  try {\n    localization.translations[locale] = JSON.parse(await file.read(path))\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } catch (error: any) {\n    const message = `Error parsing ${locale} locale for ${extension.configuration.name} at ${path}: ${error.message}`\n    await output.warn(message)\n    throw new Error(message)\n  }\n}\n"]}