import { path, template, file, error } from '@shopify/cli-kit';
export class TemplateNotFoundError extends error.Bug {
    constructor(options) {
        super(`Couldn't find template ${options.template} for extension surface ${options.extensionSurface}`);
    }
}
export async function getHTML(options) {
    const templatePath = await getTemplatePath(options);
    const templateContent = await file.read(templatePath);
    return template.create(templateContent)(options.data);
}
export async function getTemplatePath(options) {
    const templatesDirectory = await getTemplatesDirectory();
    const globPatterns = [];
    if (options.extensionSurface) {
        globPatterns.push(path.join(templatesDirectory, `${options.extensionSurface}/${options.template}.html.liquid`));
    }
    globPatterns.push(path.join(templatesDirectory, `${options.template}.html.liquid`));
    const globMatches = await path.glob(globPatterns);
    if (globMatches.length === 0) {
        throw new TemplateNotFoundError(options);
    }
    return globMatches[0];
}
export async function getTemplatesDirectory() {
    const directory = await path.findUp('templates/ui-extensions/html', {
        type: 'directory',
        cwd: path.moduleDirectory(import.meta.url),
    });
    return directory;
}
//# sourceMappingURL=templates.js.map