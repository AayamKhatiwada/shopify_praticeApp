import { path, file, output } from '@shopify/cli-kit';
export async function getLocalizationFilePaths(extension) {
    const localePath = path.join(extension.directory, 'locales');
    return path.glob([path.join(localePath, '*.json')]);
}
export async function getLocalization(extension, currentLocalizattion) {
    const localeFiles = await getLocalizationFilePaths(extension);
    if (!localeFiles.length) {
        return { localization: undefined, status: '' };
    }
    const localization = currentLocalizattion
        ? currentLocalizattion
        : {
            defaultLocale: 'en',
            translations: {},
            lastUpdated: 0,
        };
    const compilingTranslations = [];
    for (const path of localeFiles) {
        const [locale, ...fileNameSegments] = path.split('/').pop().split('.');
        if (locale) {
            if (fileNameSegments[0] === 'default') {
                localization.defaultLocale = locale;
            }
            compilingTranslations.push(compileLocalizationFiles(locale, path, localization, extension));
        }
    }
    let status = 'success';
    await Promise.all(compilingTranslations)
        .then(async () => {
        localization.lastUpdated = Date.now();
        output.info(`Parsed locales for extension ${extension.configuration.name} at ${extension.directory}`);
    })
        .catch(() => {
        status = 'error';
    });
    return {
        localization,
        status,
    };
}
async function compileLocalizationFiles(locale, path, localization, extension) {
    try {
        localization.translations[locale] = JSON.parse(await file.read(path));
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
    }
    catch (error) {
        const message = `Error parsing ${locale} locale for ${extension.configuration.name} at ${path}: ${error.message}`;
        await output.warn(message);
        throw new Error(message);
    }
}
//# sourceMappingURL=localization.js.map