import { getUIExtensionPayload } from '../payload.js';
import { deepMergeObjects } from '@shopify/cli-kit/common/object';
import { output } from '@shopify/cli-kit';
import { EventEmitter } from 'node:events';
export var ExtensionsPayloadStoreEvent;
(function (ExtensionsPayloadStoreEvent) {
    ExtensionsPayloadStoreEvent["Update"] = "PayloadUpdatedEvent:UPDATE";
})(ExtensionsPayloadStoreEvent || (ExtensionsPayloadStoreEvent = {}));
export async function getExtensionsPayloadStoreRawPayload(options) {
    return {
        app: {
            apiKey: options.apiKey,
        },
        version: '3',
        root: {
            url: new URL('/extensions', options.url).toString(),
        },
        socket: {
            url: options.websocketURL,
        },
        devConsole: {
            url: new URL('/extensions/dev-console', options.url).toString(),
        },
        store: options.storeFqdn,
        extensions: await Promise.all(options.extensions.map((extension) => getUIExtensionPayload(extension, options))),
    };
}
export class ExtensionsPayloadStore extends EventEmitter {
    constructor(rawPayload, options) {
        super();
        this.rawPayload = rawPayload;
        this.options = options;
    }
    getConnectedPayload() {
        const rawPayload = this.getRawPayload();
        return {
            app: rawPayload.app,
            store: rawPayload.store,
            extensions: rawPayload.extensions,
        };
    }
    getRawPayloadFilteredByExtensionIds(extensionIds) {
        return {
            ...this.rawPayload,
            extensions: this.rawPayload.extensions.filter((extension) => extensionIds.includes(extension.uuid)),
        };
    }
    getRawPayload() {
        return this.rawPayload;
    }
    updateApp(app) {
        this.rawPayload = deepMergeObjects(this.rawPayload, {
            app,
        });
        this.emitUpdate([]);
    }
    updateExtensions(extensions) {
        const updatedExtensionsPayload = this.rawPayload.extensions.map((rawPayloadExtension) => {
            const foundExtension = extensions.find((ext) => ext.uuid === rawPayloadExtension.uuid);
            if (foundExtension) {
                return deepMergeObjects(rawPayloadExtension, foundExtension);
            }
            else {
                return rawPayloadExtension;
            }
        });
        this.rawPayload = {
            ...this.rawPayload,
            extensions: updatedExtensionsPayload,
        };
        this.emitUpdate(extensions.map((extension) => extension.uuid));
    }
    async updateExtension(extension, development) {
        const payloadExtensions = this.rawPayload.extensions;
        const index = payloadExtensions.findIndex((extensionPayload) => extensionPayload.uuid === extension.devUUID);
        if (index === -1) {
            output.debug(output.content `Could not updateExtension() for extension with uuid: ${extension.devUUID}`);
            return;
        }
        payloadExtensions[index] = await getUIExtensionPayload(extension, {
            ...this.options,
            currentDevelopmentPayload: development || { status: payloadExtensions[index]?.development.status },
            currentLocalizationPayload: payloadExtensions[index]?.localization,
        });
        this.rawPayload.extensions = payloadExtensions;
        this.emitUpdate([extension.devUUID]);
    }
    emitUpdate(extensionIds) {
        this.emit(ExtensionsPayloadStoreEvent.Update, extensionIds);
    }
}
//# sourceMappingURL=store.js.map