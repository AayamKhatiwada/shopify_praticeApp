{"version":3,"file":"handlers.js","sourceRoot":"","sources":["../../../../../../src/cli/services/dev/extension/websocket/handlers.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,SAAS,GAKV,MAAM,aAAa,CAAA;AAEpB,OAAO,EAAO,MAAM,EAAC,MAAM,kBAAkB,CAAA;AAG7C,MAAM,UAAU,uBAAuB,CACrC,GAAoB,EACpB,OAAwC;IAExC,OAAO,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE;QAC/B,IAAI,OAAO,CAAC,GAAG,KAAK,aAAa,EAAE;YACjC,OAAM;SACP;QACD,MAAM,CAAC,KAAK,CAAC,kDAAkD,CAAC,CAAA;QAChE,GAAG,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,wBAAwB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAA;IAClF,CAAC,CAAA;AACH,CAAC;AAED,MAAM,UAAU,wBAAwB,CAAC,GAAoB,EAAE,OAAwC;IACrG,OAAO,CAAC,EAAa,EAAE,EAAE;QACvB,MAAM,CAAC,KAAK,CAAC,+CAA+C,CAAC,CAAA;QAC7D,MAAM,gBAAgB,GAAG;YACvB,KAAK,EAAE,WAAW;YAClB,IAAI,EAAE,OAAO,CAAC,YAAY,CAAC,mBAAmB,EAAE;YAChD,OAAO,EAAE,GAAG;SACb,CAAA;QACD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAA,8BAA8B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAA;QAC/F,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC,CAAA;QACzC,EAAE,CAAC,EAAE,CAAC,SAAS,EAAE,mBAAmB,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,CAAA;IACrD,CAAC,CAAA;AACH,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,GAAoB,EAAE,OAAwC;IAChG,OAAO,CAAC,IAAa,EAAE,EAAE;QACvB,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAA;QAC5C,MAAM,EAAC,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAC,GAAG,QAAQ,CAAA;QAEpD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAA,8CAA8C,SAAS;EACpF,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC;WACnB,CAAC,CAAA;QAER,IAAI,SAAS,KAAK,QAAQ,EAAE;YAC1B,MAAM,kBAAkB,GAAG,OAAO,CAAC,YAAY,CAAC,aAAa,EAAE,CAAC,GAAG,CAAC,MAAM,CAAA;YAC1E,MAAM,cAAc,GAAG,SAAS,CAAC,GAAG,EAAE,MAAM,CAAA;YAE5C,IAAI,SAAS,CAAC,GAAG,EAAE;gBACjB,IAAI,kBAAkB,KAAK,cAAc,EAAE;oBACzC,OAAM;iBACP;gBACD;;;;mBAIG;gBACH,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,CAAA;aAC9C;YACD,IAAI,SAAS,CAAC,UAAU,EAAE;gBACxB,OAAO,CAAC,YAAY,CAAC,gBAAgB,CAAC,SAAS,CAAC,UAAU,CAAC,CAAA;aAC5D;SACF;aAAM,IAAI,SAAS,KAAK,UAAU,EAAE;YACnC,MAAM,eAAe,GAAG,0BAA0B,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAA;YAErE,aAAa,CAAC,GAAG,EAAE,eAAe,CAAC,CAAA;SACpC;IACH,CAAC,CAAA;AACH,CAAC;AAED,MAAM,UAAU,uBAAuB,CACrC,GAAoB,EACpB,OAAwC;IAExC,OAAO,CAAC,YAAsB,EAAE,EAAE;QAChC,MAAM,OAAO,GAAG;YACd,KAAK,EAAE,SAAS,CAAC,MAAM;YACvB,OAAO,EAAE,GAAG;YACZ,IAAI,EAAE;gBACJ,GAAG,OAAO,CAAC,YAAY,CAAC,mCAAmC,CAAC,YAAY,CAAC;aAC1E;SACF,CAAA;QACD,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAA;IAC3B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC;KACzB,CAAC,CAAA;QACF,aAAa,CAAC,GAAG,EAAE,OAAO,CAAC,CAAA;IAC7B,CAAC,CAAA;AACH,CAAC;AAED,SAAS,aAAa,CAAC,GAAoB,EAAE,OAAwB;IACnE,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAA,qCAAqC,OAAO,CAAC,KAAK;EAC7E,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;SACxB,CAAC,CAAA;IAER,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;IAC7C,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAA;AACrD,CAAC;AAED,MAAM,UAAU,0BAA0B,CACxC,eAAwC,EACxC,OAAwC;IAExC,MAAM,iBAAiB,GAAG,OAAO,CAAC,YAAY,CAAC,aAAa,EAAE,CAAA;IAC9D,OAAO;QACL,GAAG,eAAe;QAClB,OAAO,EAAE,GAAG;QACZ,IAAI,EAAE;YACJ,GAAG,eAAe,CAAC,IAAI;YACvB,UAAU,EAAE,EAAE;YACd,KAAK,EAAE,iBAAiB,CAAC,KAAK;YAC9B,GAAG,EAAE,iBAAiB,CAAC,GAAG;SAC3B;KACF,CAAA;AACH,CAAC","sourcesContent":["import {\n  EventType,\n  IncomingDispatchMessage,\n  OutgoingDispatchMessage,\n  OutgoingMessage,\n  SetupWebSocketConnectionOptions,\n} from './models.js'\nimport {RawData, WebSocket, WebSocketServer} from 'ws'\nimport {http, output} from '@shopify/cli-kit'\nimport {Duplex} from 'stream'\n\nexport function websocketUpgradeHandler(\n  wss: WebSocketServer,\n  options: SetupWebSocketConnectionOptions,\n): (req: http.IncomingMessage, socket: Duplex, head: Buffer) => void {\n  return (request, socket, head) => {\n    if (request.url !== '/extensions') {\n      return\n    }\n    output.debug(`Upgrading HTTP request to a websocket connection`)\n    wss.handleUpgrade(request, socket, head, getConnectionDoneHandler(wss, options))\n  }\n}\n\nexport function getConnectionDoneHandler(wss: WebSocketServer, options: SetupWebSocketConnectionOptions) {\n  return (ws: WebSocket) => {\n    output.debug(`Websocket connection successfully established`)\n    const connectedPayload = {\n      event: 'connected',\n      data: options.payloadStore.getConnectedPayload(),\n      version: '3',\n    }\n    output.debug(output.content`Sending connected payload: ${output.token.json(connectedPayload)}`)\n    ws.send(JSON.stringify(connectedPayload))\n    ws.on('message', getOnMessageHandler(wss, options))\n  }\n}\n\nexport function getOnMessageHandler(wss: WebSocketServer, options: SetupWebSocketConnectionOptions) {\n  return (data: RawData) => {\n    const jsonData = JSON.parse(data.toString())\n    const {event: eventType, data: eventData} = jsonData\n\n    output.debug(output.content`Received websocket message with event type ${eventType} and data:\n${output.token.json(eventData)}\n          `)\n\n    if (eventType === 'update') {\n      const payloadStoreApiKey = options.payloadStore.getRawPayload().app.apiKey\n      const eventAppApiKey = eventData.app?.apiKey\n\n      if (eventData.app) {\n        if (payloadStoreApiKey !== eventAppApiKey) {\n          return\n        }\n        /**\n         * App updates must take precedence over extensions. Otherwise the websocket server\n         * will send an update to the client with missing app data and will cause the loading\n         * of extensions to fail.\n         */\n        options.payloadStore.updateApp(eventData.app)\n      }\n      if (eventData.extensions) {\n        options.payloadStore.updateExtensions(eventData.extensions)\n      }\n    } else if (eventType === 'dispatch') {\n      const outGoingMessage = getOutgoingDispatchMessage(jsonData, options)\n\n      notifyClients(wss, outGoingMessage)\n    }\n  }\n}\n\nexport function getPayloadUpdateHandler(\n  wss: WebSocketServer,\n  options: SetupWebSocketConnectionOptions,\n): (extensionIds: string[]) => void {\n  return (extensionIds: string[]) => {\n    const payload = {\n      event: EventType.Update,\n      version: '3',\n      data: {\n        ...options.payloadStore.getRawPayloadFilteredByExtensionIds(extensionIds),\n      },\n    }\n    output.debug(output.content`Sending websocket update event to the websocket clients:\n  ${output.token.json(payload)}\n    `)\n    notifyClients(wss, payload)\n  }\n}\n\nfunction notifyClients(wss: WebSocketServer, payload: OutgoingMessage) {\n  output.debug(output.content`Sending websocket with event type ${payload.event} and data:\n${output.token.json(payload.data)}\n        `)\n\n  const stringPayload = JSON.stringify(payload)\n  wss.clients.forEach((ws) => ws.send(stringPayload))\n}\n\nexport function getOutgoingDispatchMessage(\n  incomingMessage: IncomingDispatchMessage,\n  options: SetupWebSocketConnectionOptions,\n): OutgoingDispatchMessage {\n  const extensionsPayload = options.payloadStore.getRawPayload()\n  return {\n    ...incomingMessage,\n    version: '3',\n    data: {\n      ...incomingMessage.data,\n      extensions: [],\n      store: extensionsPayload.store,\n      app: extensionsPayload.app,\n    },\n  }\n}\n"]}