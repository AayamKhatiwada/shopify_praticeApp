{"version":3,"file":"bundle.js","sourceRoot":"","sources":["../../../../src/cli/services/deploy/bundle.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,oBAAoB,EAAE,sBAAsB,EAAE,iBAAiB,EAAC,MAAM,uBAAuB,CAAA;AAGrG,OAAO,EAAC,IAAI,EAAE,IAAI,EAAQ,MAAM,kBAAkB,CAAA;AAClD,OAAO,EAAC,GAAG,EAAC,MAAM,gCAAgC,CAAA;AAClD,OAAO,EAAC,gBAAgB,EAAC,MAAM,0BAA0B,CAAA;AAUzD,MAAM,CAAC,KAAK,UAAU,kCAAkC,CAAC,OAAsB;IAC7E,MAAM,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;QAC/C,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAA;QACnD,MAAM,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAA;QACjC,MAAM,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,CAAC,CAAC,CAAA;QAExD,MAAM,gBAAgB,CAAC;YACrB,SAAS,EAAE;gBACT;oBACE,MAAM,EAAE,kBAAkB;oBAC1B,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,MAAgB,EAAE,MAAoB,EAAE,EAAE;wBACzE,MAAM,oBAAoB,CAAC;4BACzB,GAAG,EAAE,OAAO,CAAC,GAAG;4BAChB,UAAU,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,KAAK;4BACxC,MAAM;4BACN,MAAM;4BACN,MAAM;yBACP,CAAC,CAAA;oBACJ,CAAC;iBACF;gBACD,GAAG,CAAC,MAAM,iBAAiB,CAAC;oBAC1B,GAAG,EAAE;wBACH,GAAG,OAAO,CAAC,GAAG;wBACd,UAAU,EAAE;4BACV,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU;4BACzB,EAAE,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,EAAE;gCAChD,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,WAAW,CAAC,eAAe,CAAE,CAAA;gCAChF,MAAM,iBAAiB,GAAuB;oCAC5C,GAAG,WAAW;oCACd,gBAAgB,EAAE,IAAI,CAAC,IAAI,CACzB,eAAe,EACf,WAAW,EACX,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAC5C;iCACF,CAAA;gCACD,OAAO,iBAAiB,CAAA;4BAC1B,CAAC,CAAC;yBACH;qBACF;iBACF,CAAC,CAAC;gBACH,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,iBAAiB,EAAE,EAAE;oBAC3D,OAAO;wBACL,MAAM,EAAE,iBAAiB,CAAC,eAAe;wBACzC,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,MAAgB,EAAE,MAAoB,EAAE,EAAE;4BACzE,MAAM,sBAAsB,CAAC,iBAAiB,EAAE,EAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,OAAO,CAAC,GAAG,EAAC,CAAC,CAAA;wBAC7F,CAAC;qBACF,CAAA;gBACH,CAAC,CAAC;aACH;YACD,cAAc,EAAE,KAAK;SACtB,CAAC,CAAA;QAEF,IAAI,OAAO,CAAC,MAAM,EAAE;YAClB,MAAM,GAAG,CAAC,eAAe,EAAE,OAAO,CAAC,UAAU,CAAC,CAAA;SAC/C;IACH,CAAC,CAAC,CAAA;AACJ,CAAC","sourcesContent":["import {buildThemeExtensions, buildFunctionExtension, buildUIExtensions} from '../build/extension.js'\nimport {AppInterface} from '../../models/app/app.js'\nimport {Identifiers} from '../../models/app/identifiers.js'\nimport {path, file, abort} from '@shopify/cli-kit'\nimport {zip} from '@shopify/cli-kit/node/archiver'\nimport {renderConcurrent} from '@shopify/cli-kit/node/ui'\nimport {Writable} from 'node:stream'\n\ninterface BundleOptions {\n  app: AppInterface\n  bundlePath: string\n  identifiers: Identifiers\n  bundle: boolean\n}\n\nexport async function bundleUIAndBuildFunctionExtensions(options: BundleOptions) {\n  await file.inTemporaryDirectory(async (tmpDir) => {\n    const bundleDirectory = path.join(tmpDir, 'bundle')\n    await file.mkdir(bundleDirectory)\n    await file.touch(path.join(bundleDirectory, '.shopify'))\n\n    await renderConcurrent({\n      processes: [\n        {\n          prefix: 'theme_extensions',\n          action: async (stdout: Writable, stderr: Writable, signal: abort.Signal) => {\n            await buildThemeExtensions({\n              app: options.app,\n              extensions: options.app.extensions.theme,\n              stdout,\n              stderr,\n              signal,\n            })\n          },\n        },\n        ...(await buildUIExtensions({\n          app: {\n            ...options.app,\n            extensions: {\n              ...options.app.extensions,\n              ui: options.app.extensions.ui.map((uiExtension) => {\n                const extensionId = options.identifiers.extensions[uiExtension.localIdentifier]!\n                const mappedUIExtension: typeof uiExtension = {\n                  ...uiExtension,\n                  outputBundlePath: path.join(\n                    bundleDirectory,\n                    extensionId,\n                    path.basename(uiExtension.outputBundlePath),\n                  ),\n                }\n                return mappedUIExtension\n              }),\n            },\n          },\n        })),\n        ...options.app.extensions.function.map((functionExtension) => {\n          return {\n            prefix: functionExtension.localIdentifier,\n            action: async (stdout: Writable, stderr: Writable, signal: abort.Signal) => {\n              await buildFunctionExtension(functionExtension, {stdout, stderr, signal, app: options.app})\n            },\n          }\n        }),\n      ],\n      showTimestamps: false,\n    })\n\n    if (options.bundle) {\n      await zip(bundleDirectory, options.bundlePath)\n    }\n  })\n}\n"]}