{"version":3,"file":"extension.js","sourceRoot":"","sources":["../../../../../src/cli/commands/app/generate/extension.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,QAAQ,EAAC,MAAM,mBAAmB,CAAA;AAC1C,OAAO,EACL,UAAU,EAEV,wBAAwB,EACxB,iBAAiB,EACjB,iBAAiB,EACjB,oBAAoB,EACpB,uBAAuB,EACvB,0BAA0B,EAE1B,qBAAqB,EACrB,oBAAoB,GACrB,MAAM,uBAAuB,CAAA;AAC9B,OAAO,uBAAuB,MAAM,wCAAwC,CAAA;AAE5E,OAAO,EAAC,IAAI,IAAI,OAAO,EAAC,MAAM,+BAA+B,CAAA;AAC7D,OAAO,wBAA2C,MAAM,yCAAyC,CAAA;AACjG,OAAO,EAAC,uBAAuB,EAAC,MAAM,yDAAyD,CAAA;AAC/F,OAAO,EACL,uCAAuC,EACvC,yCAAyC,EACzC,uCAAuC,GACxC,MAAM,8CAA8C,CAAA;AACrD,OAAO,QAAQ,MAAM,sBAAsB,CAAA;AAC3C,OAAO,OAAO,MAAM,mCAAmC,CAAA;AACvD,OAAO,EAAC,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,KAAK,EAAE,WAAW,EAAC,MAAM,kBAAkB,CAAA;AACtE,OAAO,EAAC,KAAK,EAAC,MAAM,aAAa,CAAA;AAGjC,MAAM,CAAC,OAAO,OAAO,oBAAqB,SAAQ,OAAO;IAsChD,MAAM,CAAC,qBAAqB;QACjC,OAAO,wBAAwB,CAAA;IACjC,CAAC;IAEM,KAAK,CAAC,GAAG;QACd,MAAM,EAAC,KAAK,EAAC,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,oBAAoB,CAAC,CAAA;QAEtD,MAAM,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC;YAC9B,0BAA0B,EAAE,KAAK;YACjC,4BAA4B,EAAE,KAAK,CAAC,WAAW,CAAC,KAAK,SAAS;YAC9D,uBAAuB,EAAE,cAAc;SACxC,CAAC,CAAC,CAAA;QAEH,MAAM,SAAS,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAA;QACvE,MAAM,GAAG,GAAiB,MAAM,OAAO,CAAC,SAAS,CAAC,CAAA;QAElD,KAAK,CAAC,IAAI,GAAG,uCAAuC,CAAC,KAAK,CAAC,IAA8B,CAAC,CAAA;QAE1F,MAAM,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC,IAAI,CAAC,CAAA;QAC5C,IAAI,CAAC,0BAA0B,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,CAAC,CAAA;QAChD,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAA;QAExD,MAAM,aAAa,GAAG,MAAM,uBAAuB,CAAC;YAClD,aAAa,EAAE,KAAK,CAAC,IAAI;YACzB,4BAA4B,EAAE,IAAI,CAAC,kCAAkC,CAAC,GAAG,CAAC;YAC1E,IAAI,EAAE,KAAK,CAAC,IAAI;YAChB,eAAe,EAAE,KAAK,CAAC,QAAQ;YAC/B,SAAS,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,YAAY,CAAC;SAC9C,CAAC,CAAA;QAEF,MAAM,EAAC,aAAa,EAAE,eAAe,EAAC,GAAG,aAAa,CAAA;QACtD,MAAM,QAAQ,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,CAAC;YAC9B,4BAA4B,EAAE,eAAe;YAC7C,iBAAiB,EAAE,aAAa;YAChC,0BAA0B,EAAE,qBAAqB,CAAC,aAAa,CAAC;YAChE,uBAAuB,EAAE,oBAAoB,CAAC,aAAa,CAAC;YAC5D,kCAAkC,EAAE,aAAa,KAAK,KAAK,CAAC,IAAI;SACjE,CAAC,CAAC,CAAA;QAEH,MAAM,kBAAkB,GAAG,MAAM,wBAAwB,CAAC;YACxD,GAAG,aAAa;YAChB,eAAe,EAAE,eAAkC;YACnD,aAAa;YACb,GAAG;YACH,QAAQ,EAAE,KAAK,CAAC,WAAW,CAAC;SAC7B,CAAC,CAAA;QAEF,MAAM,0BAA0B,GAAG,IAAI,CAAC,0BAA0B,CAChE,aAAa,CAAC,aAAa,EAC3B,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,kBAAkB,CAAC,EAChD,GAAG,CAAC,cAAc,CACnB,CAAA;QACD,MAAM,CAAC,IAAI,CAAC,0BAA0B,CAAC,CAAA;IACzC,CAAC;IAED,KAAK,CAAC,qBAAqB,CAAC,IAAwB;QAClD,IAAI,CAAC,IAAI,EAAE;YACT,OAAM;SACP;QACD,MAAM,SAAS,GAAG,MAAM,WAAW,CAAC,KAAK,CAAC,SAAS,EAAE,CAAA;QACrD,MAAM,mBAAmB,GAAG,SAAS,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,UAAU,CAAC,WAAW,CAAA;QACjF,IAAI,CAAE,mBAAgC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACrD,MAAM,IAAI,KAAK,CAAC,KAAK,CACnB,gDAAgD,yCAAyC,CACvF,mBAAmB,CACpB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CACf,CAAA;SACF;IACH,CAAC;IAED;;;;;OAKG;IACH,0BAA0B,CAAC,GAAiB,EAAE,IAAwB;QACpE,IAAI,IAAI,IAAI,IAAI,CAAC,kCAAkC,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YACvE,MAAM,IAAI,KAAK,CAAC,KAAK,CACnB,wBAAwB,EACxB,+CAA+C,uCAAuC,CACpF,IAAsB,CACvB,UAAU,CACZ,CAAA;SACF;IACH,CAAC;IAED,uBAAuB,CAAC,IAAwB,EAAE,MAA0B;QAC1E,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE;YACpB,OAAM;SACP;QACD,MAAM,wBAAwB,GAAG,uBAAuB,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;QAChG,MAAM,8BAA8B,GAAG,0BAA0B,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAA;QAEnG,MAAM,oBAAoB,GAAG,CAAC,SAAmB,EAAE,EAAE;YACnD,+DAA+D;YAC/D,OAAO,IAAI,KAAK,CAAC,KAAK,CACpB,wDAAwD,EACxD,8DAA8D,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CACtF,CAAA;QACH,CAAC,CAAA;QACD,IAAI,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YACzE,MAAM,oBAAoB,CAAC,wBAAwB,CAAC,CAAA;SACrD;QACD,IAAI,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YACrF,MAAM,oBAAoB,CAAC,8BAA8B,CAAC,CAAA;SAC3D;IACH,CAAC;IAED;;;;;;OAMG;IACH,kCAAkC,CAAC,GAAiB;QAClD,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;QAC5E,MAAM,OAAO,GAAG,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,aAAa,CAAC,IAAI,CAAC,CAAA;QAEtE,MAAM,eAAe,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,iBAAiB,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAA;QAC3F,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,iBAAiB,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAA;QAClF,OAAO,CAAC,GAAG,eAAe,EAAE,GAAG,YAAY,CAAC,CAAA;IAC9C,CAAC;IAED,0BAA0B,CACxB,aAA6B,EAC7B,kBAA0B,EAC1B,gBAAgC;QAEhC,MAAM,qBAAqB,GAAG,wBAAwB,CAAC,aAAa,CAAC,CAAA;QACrE,MAAM,CAAC,SAAS,CAAC,QAAQ,qBAAqB,CAAC,QAAQ,uCAAuC,CAAC,CAAA;QAE/F,MAAM,YAAY,GAAG,EAAE,CAAA;QACvB,YAAY,CAAC,IAAI,CACf,MAAM,CAAC,OAAO,CAAA,2CAA2C,MAAM,CAAC,KAAK,CAAC,mBAAmB,CACvF,MAAM,CAAC,OAAO,CAAA,MAAM,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAC5D,EAAE,CAAC,KAAK,CACV,CAAA;QAED,IAAI,iBAAiB,CAAC,aAAa,CAAC,IAAI,oBAAoB,CAAC,aAAa,CAAC,EAAE;YAC3E,YAAY,CAAC,IAAI,CACf,MAAM,CAAC,OAAO,CAAA,kCAAkC,MAAM,CAAC,KAAK,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,CAChH,CAAA;SACF;QAED,IAAI,qBAAqB,CAAC,cAAc,EAAE;YACxC,YAAY,CAAC,IAAI,CAAC,KAAK,qBAAqB,CAAC,cAAc,EAAE,CAAC,CAAA;SAC/D;QAED,IAAI,qBAAqB,CAAC,OAAO,EAAE;YACjC,YAAY,CAAC,IAAI,CACf,MAAM,CAAC,OAAO,CAAA,+BAA+B,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,qBAAqB,CAAC,OAAO,CAAC,IAAI;iBACtG,KAAK,CACT,CAAA;SACF;QAED,OAAO,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAA;IAC7C,CAAC;;AAnMM,gCAAW,GAAG,uBAAuB,CAAA;AACrC,6BAAQ,GAAG,CAAC,qCAAqC,CAAC,CAAA;AAElD,0BAAK,GAAG;IACb,GAAG,GAAG,CAAC,WAAW;IAClB,GAAG,QAAQ;IACX,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC;QACjB,IAAI,EAAE,GAAG;QACT,MAAM,EAAE,KAAK;QACb,WAAW,EAAE,6BAA6B,yCAAyC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,IAAI,CAC9G,GAAG,CACJ,GAAG;QACJ,GAAG,EAAE,6BAA6B;KACnC,CAAC;IACF,IAAI,EAAE,KAAK,CAAC,MAAM,CAAC;QACjB,IAAI,EAAE,GAAG;QACT,MAAM,EAAE,KAAK;QACb,WAAW,EAAE,wBAAwB;QACrC,GAAG,EAAE,mBAAmB;KACzB,CAAC;IACF,WAAW,EAAE,KAAK,CAAC,MAAM,CAAC;QACxB,MAAM,EAAE,IAAI;QACZ,IAAI,EAAE,GAAG;QACT,WAAW,EACT,wHAAwH;QAC1H,GAAG,EAAE,wBAAwB;KAC9B,CAAC;IACF,QAAQ,EAAE,KAAK,CAAC,MAAM,CAAC;QACrB,MAAM,EAAE,KAAK;QACb,WAAW,EAAE,iEAAiE;QAC9E,OAAO,EAAE,CAAC,YAAY,EAAE,OAAO,EAAE,YAAY,EAAE,kBAAkB,EAAE,MAAM,EAAE,MAAM,CAAC;QAClF,GAAG,EAAE,uBAAuB;KAC7B,CAAC;CACH,CAAA;AAEM,yBAAI,GAAG,CAAC,EAAC,IAAI,EAAE,MAAM,EAAC,CAAC,CAAA","sourcesContent":["import {appFlags} from '../../../flags.js'\nimport {\n  extensions,\n  ExtensionTypes,\n  getExtensionOutputConfig,\n  limitedExtensions,\n  isUiExtensionType,\n  isThemeExtensionType,\n  isFunctionExtensionType,\n  functionExtensionTemplates,\n  ExternalExtensionTypes,\n  extensionTypeCategory,\n  extensionTypeIsGated,\n} from '../../../constants.js'\nimport generateExtensionPrompt from '../../../prompts/generate/extension.js'\nimport {AppInterface} from '../../../models/app/app.js'\nimport {load as loadApp} from '../../../models/app/loader.js'\nimport generateExtensionService, {ExtensionFlavor} from '../../../services/generate/extension.js'\nimport {getUIExtensionTemplates} from '../../../utilities/extensions/template-configuration.js'\nimport {\n  mapExternalExtensionTypeToExtensionType,\n  mapExtensionTypesToExternalExtensionTypes,\n  mapExtensionTypeToExternalExtensionType,\n} from '../../../utilities/extensions/name-mapper.js'\nimport metadata from '../../../metadata.js'\nimport Command from '../../../utilities/app-command.js'\nimport {output, path, cli, error, environment} from '@shopify/cli-kit'\nimport {Flags} from '@oclif/core'\nimport {PackageManager} from '@shopify/cli-kit/node/node-package-manager'\n\nexport default class AppScaffoldExtension extends Command {\n  static description = 'Scaffold an Extension'\n  static examples = ['<%= config.bin %> <%= command.id %>']\n\n  static flags = {\n    ...cli.globalFlags,\n    ...appFlags,\n    type: Flags.string({\n      char: 't',\n      hidden: false,\n      description: `Extension type\\n<options: ${mapExtensionTypesToExternalExtensionTypes(extensions.publicTypes).join(\n        '|',\n      )}>`,\n      env: 'SHOPIFY_FLAG_EXTENSION_TYPE',\n    }),\n    name: Flags.string({\n      char: 'n',\n      hidden: false,\n      description: 'name of your Extension',\n      env: 'SHOPIFY_FLAG_NAME',\n    }),\n    'clone-url': Flags.string({\n      hidden: true,\n      char: 'u',\n      description:\n        'The Git URL to clone the function extensions templates from. Defaults to: https://github.com/Shopify/function-examples',\n      env: 'SHOPIFY_FLAG_CLONE_URL',\n    }),\n    template: Flags.string({\n      hidden: false,\n      description: 'Choose a starting template for your extension, where applicable',\n      options: ['vanilla-js', 'react', 'typescript', 'typescript-react', 'wasm', 'rust'],\n      env: 'SHOPIFY_FLAG_TEMPLATE',\n    }),\n  }\n\n  static args = [{name: 'file'}]\n\n  public static analyticsNameOverride(): string | undefined {\n    return 'app scaffold extension'\n  }\n\n  public async run(): Promise<void> {\n    const {flags} = await this.parse(AppScaffoldExtension)\n\n    await metadata.addPublic(() => ({\n      cmd_scaffold_required_auth: false,\n      cmd_scaffold_template_custom: flags['clone-url'] !== undefined,\n      cmd_scaffold_type_owner: '@shopify/app',\n    }))\n\n    const directory = flags.path ? path.resolve(flags.path) : process.cwd()\n    const app: AppInterface = await loadApp(directory)\n\n    flags.type = mapExternalExtensionTypeToExtensionType(flags.type as ExternalExtensionTypes)\n\n    await this.validateExtensionType(flags.type)\n    this.validateExtensionTypeLimit(app, flags.type)\n    this.validateExtensionFlavor(flags.type, flags.template)\n\n    const promptAnswers = await generateExtensionPrompt({\n      extensionType: flags.type,\n      extensionTypesAlreadyAtQuota: this.limitedExtensionsAlreadyScaffolded(app),\n      name: flags.name,\n      extensionFlavor: flags.template,\n      directory: path.join(directory, 'extensions'),\n    })\n\n    const {extensionType, extensionFlavor} = promptAnswers\n    await metadata.addPublic(() => ({\n      cmd_scaffold_template_flavor: extensionFlavor,\n      cmd_scaffold_type: extensionType,\n      cmd_scaffold_type_category: extensionTypeCategory(extensionType),\n      cmd_scaffold_type_gated: extensionTypeIsGated(extensionType),\n      cmd_scaffold_used_prompts_for_type: extensionType !== flags.type,\n    }))\n\n    const extensionDirectory = await generateExtensionService({\n      ...promptAnswers,\n      extensionFlavor: extensionFlavor as ExtensionFlavor,\n      extensionType,\n      app,\n      cloneUrl: flags['clone-url'],\n    })\n\n    const formattedSuccessfulMessage = this.formatSuccessfulRunMessage(\n      promptAnswers.extensionType,\n      path.relative(app.directory, extensionDirectory),\n      app.packageManager,\n    )\n    output.info(formattedSuccessfulMessage)\n  }\n\n  async validateExtensionType(type: string | undefined) {\n    if (!type) {\n      return\n    }\n    const isShopify = await environment.local.isShopify()\n    const supportedExtensions = isShopify ? extensions.types : extensions.publicTypes\n    if (!(supportedExtensions as string[]).includes(type)) {\n      throw new error.Abort(\n        `The following extension types are supported: ${mapExtensionTypesToExternalExtensionTypes(\n          supportedExtensions,\n        ).join(', ')}`,\n      )\n    }\n  }\n\n  /**\n   * If the type passed as flag is not valid because it has already been scaffolded\n   * and we don't allow multiple extensions of that type, throw an error\n   * @param app - current App\n   * @param type - extension type\n   */\n  validateExtensionTypeLimit(app: AppInterface, type: string | undefined) {\n    if (type && this.limitedExtensionsAlreadyScaffolded(app).includes(type)) {\n      throw new error.Abort(\n        'Invalid extension type',\n        `You can only scaffold one extension of type ${mapExtensionTypeToExternalExtensionType(\n          type as ExtensionTypes,\n        )} per app`,\n      )\n    }\n  }\n\n  validateExtensionFlavor(type: string | undefined, flavor: string | undefined) {\n    if (!flavor || !type) {\n      return\n    }\n    const uiExtensionTemplateNames = getUIExtensionTemplates(type).map((template) => template.value)\n    const functionExtensionTemplateNames = functionExtensionTemplates.map((template) => template.value)\n\n    const invalidTemplateError = (templates: string[]) => {\n      // eslint-disable-next-line rulesdir/no-error-factory-functions\n      return new error.Abort(\n        'Specified extension template on invalid extension type',\n        `You can only specify a template for these extension types: ${templates.join(', ')}.`,\n      )\n    }\n    if (isUiExtensionType(type) && !uiExtensionTemplateNames.includes(flavor)) {\n      throw invalidTemplateError(uiExtensionTemplateNames)\n    }\n    if (isFunctionExtensionType(type) && !functionExtensionTemplateNames.includes(flavor)) {\n      throw invalidTemplateError(functionExtensionTemplateNames)\n    }\n  }\n\n  /**\n   * Some extension types like `theme` and `product_subscription` are limited to one per app\n   * Use this method to retrieve a list of the limited types that have already been scaffolded\n   *\n   * @param app - current App\n   * @returns list of extensions that are limited by quantity and are already scaffolded\n   */\n  limitedExtensionsAlreadyScaffolded(app: AppInterface): string[] {\n    const themeTypes = app.extensions.theme.map((ext) => ext.configuration.type)\n    const uiTypes = app.extensions.ui.map((ext) => ext.configuration.type)\n\n    const themeExtensions = themeTypes.filter((type) => limitedExtensions.theme.includes(type))\n    const uiExtensions = uiTypes.filter((type) => limitedExtensions.ui.includes(type))\n    return [...themeExtensions, ...uiExtensions]\n  }\n\n  formatSuccessfulRunMessage(\n    extensionType: ExtensionTypes,\n    extensionDirectory: string,\n    depndencyManager: PackageManager,\n  ): string {\n    const extensionOutputConfig = getExtensionOutputConfig(extensionType)\n    output.completed(`Your ${extensionOutputConfig.humanKey} extension was added to your project!`)\n\n    const outputTokens = []\n    outputTokens.push(\n      output.content`\\n  To find your extension, remember to ${output.token.genericShellCommand(\n        output.content`cd ${output.token.path(extensionDirectory)}`,\n      )}`.value,\n    )\n\n    if (isUiExtensionType(extensionType) || isThemeExtensionType(extensionType)) {\n      outputTokens.push(\n        output.content`  To preview your project, run ${output.token.packagejsonScript(depndencyManager, 'dev')}`.value,\n      )\n    }\n\n    if (extensionOutputConfig.additionalHelp) {\n      outputTokens.push(`  ${extensionOutputConfig.additionalHelp}`)\n    }\n\n    if (extensionOutputConfig.helpURL) {\n      outputTokens.push(\n        output.content`  For more details, see the ${output.token.link('docs', extensionOutputConfig.helpURL)} ✨`\n          .value,\n      )\n    }\n\n    return outputTokens.join('\\n').concat('\\n')\n  }\n}\n"]}