import { ExtensionTypes } from '../../../constants.js';
import { AppInterface } from '../../../models/app/app.js';
import Command from '../../../utilities/app-command.js';
import { PackageManager } from '@shopify/cli-kit/node/node-package-manager';
export default class AppScaffoldExtension extends Command {
    static description: string;
    static examples: string[];
    static flags: {
        type: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        name: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        'clone-url': import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        template: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        path: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        preset: import("@oclif/core/lib/interfaces").OptionFlag<string | undefined>;
        verbose: import("@oclif/core/lib/interfaces").BooleanFlag<boolean>;
    };
    static args: {
        name: string;
    }[];
    static analyticsNameOverride(): string | undefined;
    run(): Promise<void>;
    validateExtensionType(type: string | undefined): Promise<void>;
    /**
     * If the type passed as flag is not valid because it has already been scaffolded
     * and we don't allow multiple extensions of that type, throw an error
     * @param app - current App
     * @param type - extension type
     */
    validateExtensionTypeLimit(app: AppInterface, type: string | undefined): void;
    validateExtensionFlavor(type: string | undefined, flavor: string | undefined): void;
    /**
     * Some extension types like `theme` and `product_subscription` are limited to one per app
     * Use this method to retrieve a list of the limited types that have already been scaffolded
     *
     * @param app - current App
     * @returns list of extensions that are limited by quantity and are already scaffolded
     */
    limitedExtensionsAlreadyScaffolded(app: AppInterface): string[];
    formatSuccessfulRunMessage(extensionType: ExtensionTypes, extensionDirectory: string, depndencyManager: PackageManager): string;
}
