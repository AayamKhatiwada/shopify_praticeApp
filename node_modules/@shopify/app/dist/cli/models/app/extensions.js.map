{"version":3,"file":"extensions.js","sourceRoot":"","sources":["../../../../src/cli/models/app/extensions.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  functionExtensions,\n  themeExtensions,\n  uiExtensions,\n  ExtensionTypes,\n  uiExternalExtensionTypes,\n} from '../../constants.js'\nimport {schema} from '@shopify/cli-kit'\n\nexport interface Extension {\n  idEnvironmentVariableName: string\n  localIdentifier: string\n  configurationPath: string\n  directory: string\n  type: ExtensionTypes\n  graphQLType: string\n}\n\nexport const UIExtensionConfigurationSchema = schema.define.object({\n  name: schema.define.string(),\n  type: schema.define.enum(uiExtensions.types),\n  metafields: schema.define\n    .array(\n      schema.define.object({\n        namespace: schema.define.string(),\n        key: schema.define.string(),\n      }),\n    )\n    .default([]),\n  extensionPoints: schema.define.array(schema.define.string()).optional(),\n  capabilities: schema.define\n    .object({\n      block_progress: schema.define.boolean().optional(),\n      network_access: schema.define.boolean().optional(),\n    })\n    .optional(),\n\n  // Only for CheckoutUiExtension\n  settings: schema.define.any().optional(),\n\n  // Only for CustomerAccountsUiExtension\n  categories: schema.define.array(schema.define.string()).optional(),\n  localization: schema.define.any().optional(),\n\n  // Only for WebPixel\n  runtimeContext: schema.define.string().optional(),\n  version: schema.define.string().optional(),\n  configuration: schema.define.any().optional(),\n})\n\nexport const UIExtensionConfigurationSupportedSchema = UIExtensionConfigurationSchema.extend({\n  type: schema.define.enum([...uiExtensions.types, ...uiExternalExtensionTypes.types]),\n})\n\nexport const FunctionExtensionConfigurationSchema = schema.define.object({\n  name: schema.define.string(),\n  type: schema.define.enum(functionExtensions.types),\n  description: schema.define.string().default(''),\n  build: schema.define.object({\n    command: schema.define.string(),\n    path: schema.define.string().optional(),\n  }),\n  configurationUi: schema.define.boolean().optional().default(true),\n  ui: schema.define\n    .object({\n      paths: schema.define\n        .object({\n          create: schema.define.string(),\n          details: schema.define.string(),\n        })\n        .optional(),\n    })\n    .optional(),\n  apiVersion: schema.define.string(),\n})\n\nexport const ThemeExtensionConfigurationSchema = schema.define.object({\n  name: schema.define.string(),\n  type: schema.define.enum(themeExtensions.types),\n})\n\nexport const FunctionExtensionMetadataSchema = schema.define.object({\n  schemaVersions: schema.define.object({}).catchall(\n    schema.define.object({\n      major: schema.define.number(),\n      minor: schema.define.number(),\n    }),\n  ),\n})\n\nexport type FunctionExtension = Extension & {\n  configuration: FunctionExtensionConfiguration\n  metadata: FunctionExtensionMetadata\n  buildWasmPath: () => string\n  inputQueryPath: () => string\n}\n\nexport type ThemeExtension = Extension & {\n  configuration: ThemeExtensionConfiguration\n}\n\nexport type UIExtension = Extension & {\n  configuration: UIExtensionConfiguration\n  entrySourceFilePath: string\n  outputBundlePath: string\n  devUUID: string\n}\n\ntype UIExtensionConfiguration = schema.define.infer<typeof UIExtensionConfigurationSchema>\ntype FunctionExtensionConfiguration = schema.define.infer<typeof FunctionExtensionConfigurationSchema>\ntype ThemeExtensionConfiguration = schema.define.infer<typeof ThemeExtensionConfigurationSchema>\ntype FunctionExtensionMetadata = schema.define.infer<typeof FunctionExtensionMetadataSchema>\n"]}