{"version":3,"file":"loader.js","sourceRoot":"","sources":["../../../../src/cli/models/app/loader.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  UIExtension,\n  ThemeExtension,\n  FunctionExtension,\n  FunctionExtensionConfigurationSchema,\n  FunctionExtensionMetadataSchema,\n  ThemeExtensionConfigurationSchema,\n  UIExtensionConfigurationSupportedSchema,\n  Extension,\n} from './extensions.js'\nimport {AppConfigurationSchema, Web, WebConfigurationSchema, App, AppInterface, WebType} from './app.js'\nimport {configurationFileNames, dotEnvFileNames, extensionGraphqlId} from '../../constants.js'\nimport {mapUIExternalExtensionTypeToUIExtensionType} from '../../utilities/extensions/name-mapper.js'\nimport metadata from '../../metadata.js'\nimport {error, file, id, path, schema, string, toml, output} from '@shopify/cli-kit'\nimport {readAndParseDotEnv, DotEnvFile} from '@shopify/cli-kit/node/dot-env'\nimport {\n  getDependencies,\n  getPackageManager,\n  getPackageName,\n  usesWorkspaces as appUsesWorkspaces,\n} from '@shopify/cli-kit/node/node-package-manager'\nimport {resolveFramework} from '@shopify/cli-kit/node/framework'\n\nconst defaultExtensionDirectory = 'extensions/*'\n\nexport type AppLoaderMode = 'strict' | 'report'\n\nexport class AppErrors {\n  private errors: {\n    [key: string]: output.Message\n  } = {}\n\n  addError(path: string, message: output.Message): void {\n    this.errors[path] = message\n  }\n\n  getError(path: string) {\n    return this.errors[path]\n  }\n\n  isEmpty() {\n    return Object.keys(this.errors).length === 0\n  }\n\n  toJSON(): output.Message[] {\n    return Object.values(this.errors)\n  }\n}\n\nexport async function load(directory: string, mode: AppLoaderMode = 'strict'): Promise<AppInterface> {\n  const loader = new AppLoader({directory, mode})\n  return loader.loaded()\n}\n\ninterface AppLoaderConstructorArgs {\n  directory: string\n  mode: AppLoaderMode\n}\nclass AppLoader {\n  private directory: string\n  private mode: AppLoaderMode\n  private appDirectory = ''\n  private configurationPath = ''\n  private errors: AppErrors = new AppErrors()\n\n  constructor({directory, mode}: AppLoaderConstructorArgs) {\n    this.mode = mode\n    this.directory = directory\n  }\n\n  async loaded() {\n    this.appDirectory = await this.findAppDirectory()\n    const configurationPath = await this.getConfigurationPath()\n    const configuration = await this.parseConfigurationFile(AppConfigurationSchema, configurationPath)\n    const dotenv = await this.loadDotEnv()\n    const {functions, usedCustomLayout: usedCustomLayoutForFunctionExtensions} = await this.loadFunctions(\n      configuration.extensionDirectories,\n    )\n    const {uiExtensions, usedCustomLayout: usedCustomLayoutForUIExtensions} = await this.loadUIExtensions(\n      configuration.extensionDirectories,\n    )\n    const {themeExtensions, usedCustomLayout: usedCustomLayoutForThemeExtensions} = await this.loadThemeExtensions(\n      configuration.extensionDirectories,\n    )\n    const packageJSONPath = path.join(this.appDirectory, 'package.json')\n    const name = (await getPackageName(packageJSONPath)) ?? path.basename(this.appDirectory)\n    const nodeDependencies = await getDependencies(packageJSONPath)\n    const packageManager = await getPackageManager(this.appDirectory)\n    const {webs, usedCustomLayout: usedCustomLayoutForWeb} = await this.loadWebs()\n    const usesWorkspaces = await appUsesWorkspaces(this.appDirectory)\n\n    const appClass = new App(\n      name,\n      'SHOPIFY_API_KEY',\n      this.appDirectory,\n      packageManager,\n      configuration,\n      configurationPath,\n      nodeDependencies,\n      webs,\n      uiExtensions,\n      themeExtensions,\n      functions,\n      usesWorkspaces,\n      dotenv,\n    )\n\n    if (!this.errors.isEmpty()) appClass.errors = this.errors\n\n    await logMetadataForLoadedApp(appClass, {\n      usedCustomLayoutForWeb,\n      usedCustomLayoutForUIExtensions,\n      usedCustomLayoutForFunctionExtensions,\n      usedCustomLayoutForThemeExtensions,\n    })\n\n    return appClass\n  }\n\n  async loadDotEnv(): Promise<DotEnvFile | undefined> {\n    let dotEnvFile: DotEnvFile | undefined\n    const dotEnvPath = path.join(this.appDirectory, dotEnvFileNames.production)\n    if (await file.exists(dotEnvPath)) {\n      dotEnvFile = await readAndParseDotEnv(dotEnvPath)\n    }\n    return dotEnvFile\n  }\n\n  async findAppDirectory() {\n    if (!(await file.exists(this.directory))) {\n      throw new error.Abort(output.content`Couldn't find directory ${output.token.path(this.directory)}`)\n    }\n    return path.dirname(await this.getConfigurationPath())\n  }\n\n  async getConfigurationPath() {\n    if (this.configurationPath) return this.configurationPath\n\n    const configurationPath = await path.findUp(configurationFileNames.app, {\n      cwd: this.directory,\n      type: 'file',\n    })\n    if (!configurationPath) {\n      throw new error.Abort(\n        output.content`Couldn't find the configuration file for ${output.token.path(\n          this.directory,\n        )}, are you in an app directory?`,\n      )\n    }\n\n    this.configurationPath = configurationPath\n    return configurationPath\n  }\n\n  async loadWebs(): Promise<{webs: Web[]; usedCustomLayout: boolean}> {\n    const webTomlPaths = await path.glob(path.join(this.appDirectory, `**/${configurationFileNames.web}`))\n\n    const webs = await Promise.all(webTomlPaths.map((path) => this.loadWeb(path)))\n\n    const webTomlsInStandardLocation = await path.glob(\n      path.join(this.appDirectory, `web/**/${configurationFileNames.web}`),\n    )\n    const usedCustomLayout = webTomlsInStandardLocation.length !== webTomlPaths.length\n\n    return {webs, usedCustomLayout}\n  }\n\n  async loadWeb(WebConfigurationFile: string): Promise<Web> {\n    return {\n      directory: path.dirname(WebConfigurationFile),\n      configuration: await this.parseConfigurationFile(WebConfigurationSchema, WebConfigurationFile),\n      framework: await resolveFramework(path.dirname(WebConfigurationFile)),\n    }\n  }\n\n  async loadConfigurationFile(\n    filepath: string,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    decode: (input: any) => any = toml.decode,\n  ): Promise<unknown> {\n    if (!(await file.exists(filepath))) {\n      return this.abortOrReport(\n        output.content`Couldn't find the configuration file at ${output.token.path(filepath)}`,\n        '',\n        filepath,\n      )\n    }\n    const configurationContent = await file.read(filepath)\n    let configuration: object\n    try {\n      configuration = decode(configurationContent)\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (err: any) {\n      // TOML errors have line, pos and col properties\n      if (err.line && err.pos && err.col) {\n        return this.abortOrReport(\n          output.content`Fix the following error in ${output.token.path(filepath)}:\\n${err.message}`,\n          null,\n          filepath,\n        )\n      } else {\n        throw err\n      }\n    }\n    // Convert snake_case keys to camelCase before returning\n    return {\n      ...Object.fromEntries(Object.entries(configuration).map((kv) => [string.camelize(kv[0]), kv[1]])),\n    }\n  }\n\n  async parseConfigurationFile<TSchema extends schema.define.ZodType>(\n    schema: TSchema,\n    filepath: string,\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    decode: (input: any) => any = toml.decode,\n  ): Promise<schema.define.TypeOf<TSchema>> {\n    const fallbackOutput = {} as schema.define.TypeOf<TSchema>\n\n    const configurationObject = await this.loadConfigurationFile(filepath, decode)\n    if (!configurationObject) return fallbackOutput\n\n    const parseResult = schema.safeParse(configurationObject)\n\n    if (!parseResult.success) {\n      const formattedError = JSON.stringify(parseResult.error.issues, null, 2)\n      return this.abortOrReport(\n        output.content`Fix a schema error in ${output.token.path(filepath)}:\\n${formattedError}`,\n        fallbackOutput,\n        filepath,\n      )\n    }\n    return parseResult.data\n  }\n\n  async loadUIExtensions(\n    extensionDirectories?: string[],\n  ): Promise<{uiExtensions: UIExtension[]; usedCustomLayout: boolean}> {\n    const extensionConfigPaths = [...(extensionDirectories ?? [defaultExtensionDirectory])].map((extensionPath) => {\n      return path.join(this.appDirectory, extensionPath, `${configurationFileNames.extension.ui}`)\n    })\n    const configPaths = await path.glob(extensionConfigPaths)\n\n    const extensions = configPaths.map(async (configurationPath) => {\n      const directory = path.dirname(configurationPath)\n      const configurationSupported = await this.parseConfigurationFile(\n        UIExtensionConfigurationSupportedSchema,\n        configurationPath,\n      )\n      const configuration = {\n        ...configurationSupported,\n        type: mapUIExternalExtensionTypeToUIExtensionType(configurationSupported.type),\n      }\n\n      const entrySourceFilePath = (\n        await Promise.all(\n          ['index']\n            .flatMap((name) => [`${name}.js`, `${name}.jsx`, `${name}.ts`, `${name}.tsx`])\n            .flatMap((fileName) => [`src/${fileName}`, `${fileName}`])\n            .map((relativePath) => path.join(directory, relativePath))\n            .map(async (sourcePath) => ((await file.exists(sourcePath)) ? sourcePath : undefined)),\n        )\n      ).find((sourcePath) => sourcePath !== undefined)\n      if (!entrySourceFilePath) {\n        this.abortOrReport(\n          output.content`Couldn't find an index.{js,jsx,ts,tsx} file in the directories ${output.token.path(\n            directory,\n          )} or ${output.token.path(path.join(directory, 'src'))}`,\n          undefined,\n          directory,\n        )\n      }\n\n      return {\n        idEnvironmentVariableName: `SHOPIFY_${string.constantize(path.basename(directory))}_ID`,\n        directory,\n        configuration,\n        configurationPath,\n        type: configuration.type,\n        graphQLType: extensionGraphqlId(configuration.type),\n        entrySourceFilePath: entrySourceFilePath ?? '',\n        outputBundlePath: path.join(directory, 'dist/main.js'),\n        localIdentifier: path.basename(directory),\n        // The convention is that unpublished extensions will have a random UUID with prefix `dev-`\n        devUUID: `dev-${id.generateRandomUUID()}`,\n      }\n    })\n    return {uiExtensions: await Promise.all(extensions), usedCustomLayout: extensionDirectories !== undefined}\n  }\n\n  async loadFunctions(\n    extensionDirectories?: string[],\n  ): Promise<{functions: FunctionExtension[]; usedCustomLayout: boolean}> {\n    const functionConfigPaths = [...(extensionDirectories ?? [defaultExtensionDirectory])].map((extensionPath) => {\n      return path.join(this.appDirectory, extensionPath, `${configurationFileNames.extension.function}`)\n    })\n    const configPaths = await path.glob(functionConfigPaths)\n\n    const functions = configPaths.map(async (configurationPath) => {\n      const directory = path.dirname(configurationPath)\n      const configuration = await this.parseConfigurationFile(FunctionExtensionConfigurationSchema, configurationPath)\n      const metadata = await this.parseConfigurationFile(\n        FunctionExtensionMetadataSchema,\n        path.join(directory, 'metadata.json'),\n        JSON.parse,\n      )\n      return {\n        directory,\n        configuration,\n        configurationPath,\n        metadata,\n        type: configuration.type,\n        graphQLType: extensionGraphqlId(configuration.type),\n        idEnvironmentVariableName: `SHOPIFY_${string.constantize(path.basename(directory))}_ID`,\n        localIdentifier: path.basename(directory),\n        buildWasmPath() {\n          return configuration.build.path\n            ? path.join(directory, configuration.build.path)\n            : path.join(directory, 'dist/index.wasm')\n        },\n        inputQueryPath() {\n          return path.join(directory, 'input.graphql')\n        },\n      }\n    })\n    return {functions: await Promise.all(functions), usedCustomLayout: extensionDirectories !== undefined}\n  }\n\n  async loadThemeExtensions(\n    extensionDirectories?: string[],\n  ): Promise<{themeExtensions: ThemeExtension[]; usedCustomLayout: boolean}> {\n    const themeConfigPaths = [...(extensionDirectories ?? [defaultExtensionDirectory])].map((extensionPath) => {\n      return path.join(this.appDirectory, extensionPath, `${configurationFileNames.extension.theme}`)\n    })\n    const configPaths = await path.glob(themeConfigPaths)\n\n    const themeExtensions = configPaths.map(async (configurationPath) => {\n      const directory = path.dirname(configurationPath)\n      const configuration = await this.parseConfigurationFile(ThemeExtensionConfigurationSchema, configurationPath)\n      return {\n        directory,\n        configuration,\n        configurationPath,\n        type: configuration.type,\n        graphQLType: extensionGraphqlId(configuration.type),\n        idEnvironmentVariableName: `SHOPIFY_${string.constantize(path.basename(directory))}_ID`,\n        localIdentifier: path.basename(directory),\n      }\n    })\n    return {\n      themeExtensions: await Promise.all(themeExtensions),\n      usedCustomLayout: extensionDirectories !== undefined,\n    }\n  }\n\n  abortOrReport<T>(errorMessage: output.Message, fallback: T, configurationPath: string): T {\n    if (this.mode === 'strict') {\n      throw new error.Abort(errorMessage)\n    } else {\n      this.errors.addError(configurationPath, errorMessage)\n      return fallback\n    }\n  }\n}\n\nasync function getProjectType(webs: Web[]): Promise<'node' | 'php' | 'ruby' | 'frontend' | undefined> {\n  const backendWebs = webs.filter((web) => web.configuration.type === WebType.Backend)\n  const frontendWebs = webs.filter((web) => web.configuration.type === WebType.Frontend)\n  if (backendWebs.length > 1) {\n    output.debug('Unable to decide project type as multiple web backends')\n    return\n  } else if (backendWebs.length === 0 && frontendWebs.length > 0) {\n    return 'frontend'\n  } else if (backendWebs.length === 0) {\n    output.debug('Unable to decide project type as no web backend')\n    return\n  }\n  const {directory} = backendWebs[0]!\n\n  const nodeConfigFile = path.join(directory, 'package.json')\n  const rubyConfigFile = path.join(directory, 'Gemfile')\n  const phpConfigFile = path.join(directory, 'composer.json')\n\n  if (await file.exists(nodeConfigFile)) {\n    return 'node'\n  } else if (await file.exists(rubyConfigFile)) {\n    return 'ruby'\n  } else if (await file.exists(phpConfigFile)) {\n    return 'php'\n  }\n  return undefined\n}\n\nasync function logMetadataForLoadedApp(\n  app: App,\n  loadingStrategy: {\n    usedCustomLayoutForWeb: boolean\n    usedCustomLayoutForUIExtensions: boolean\n    usedCustomLayoutForFunctionExtensions: boolean\n    usedCustomLayoutForThemeExtensions: boolean\n  },\n) {\n  await metadata.addPublic(async () => {\n    const projectType = await getProjectType(app.webs)\n\n    const extensionFunctionCount = app.extensions.function.length\n    const extensionUICount = app.extensions.ui.length\n    const extensionThemeCount = app.extensions.theme.length\n\n    const extensionTotalCount = extensionFunctionCount + extensionUICount + extensionThemeCount\n\n    const webBackendCount = app.webs.filter((web) => web.configuration.type === WebType.Backend).length\n    const webBackendFramework =\n      webBackendCount === 1\n        ? app.webs.filter((web) => web.configuration.type === WebType.Backend)[0]?.framework\n        : undefined\n    const webFrontendCount = app.webs.filter((web) => web.configuration.type === WebType.Frontend).length\n\n    const allExtensions: Extension[] = [...app.extensions.function, ...app.extensions.theme, ...app.extensions.ui]\n    const extensionsBreakdownMapping: {[key: string]: number} = {}\n    for (const extension of allExtensions) {\n      if (extensionsBreakdownMapping[extension.type] === undefined) {\n        extensionsBreakdownMapping[extension.type] = 1\n      } else {\n        extensionsBreakdownMapping[extension.type]++\n      }\n    }\n\n    return {\n      project_type: projectType,\n      app_extensions_any: extensionTotalCount > 0,\n      app_extensions_breakdown: JSON.stringify(extensionsBreakdownMapping),\n      app_extensions_count: extensionTotalCount,\n      app_extensions_custom_layout:\n        loadingStrategy.usedCustomLayoutForFunctionExtensions ||\n        loadingStrategy.usedCustomLayoutForThemeExtensions ||\n        loadingStrategy.usedCustomLayoutForUIExtensions,\n      app_extensions_function_any: extensionFunctionCount > 0,\n      app_extensions_function_count: extensionFunctionCount,\n      app_extensions_function_custom_layout: loadingStrategy.usedCustomLayoutForFunctionExtensions,\n      app_extensions_theme_any: extensionThemeCount > 0,\n      app_extensions_theme_count: extensionThemeCount,\n      app_extensions_theme_custom_layout: loadingStrategy.usedCustomLayoutForThemeExtensions,\n      app_extensions_ui_any: extensionUICount > 0,\n      app_extensions_ui_count: extensionUICount,\n      app_extensions_ui_custom_layout: loadingStrategy.usedCustomLayoutForUIExtensions,\n      app_name_hash: string.hashString(app.name),\n      app_path_hash: string.hashString(app.directory),\n      app_scopes: JSON.stringify(\n        app.configuration.scopes\n          .split(',')\n          .map((scope) => scope.trim())\n          .sort(),\n      ),\n      app_web_backend_any: webBackendCount > 0,\n      app_web_backend_count: webBackendCount,\n      app_web_custom_layout: loadingStrategy.usedCustomLayoutForWeb,\n      app_web_framework: webBackendFramework,\n      app_web_frontend_any: webFrontendCount > 0,\n      app_web_frontend_count: webFrontendCount,\n      env_package_manager_workspaces: app.usesWorkspaces,\n    }\n  })\n\n  await metadata.addSensitive(async () => {\n    return {\n      app_name: app.name,\n    }\n  })\n}\n"]}