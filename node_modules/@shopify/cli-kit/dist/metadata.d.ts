import { AnyJson } from './json.js';
import { MonorailEventPublic } from './monorail.js';
import { PickByPrefix } from './typing/pick-by-prefix.js';
declare type ProvideMetadata<T> = () => Partial<T> | Promise<Partial<T>>;
declare type MetadataErrorHandling = 'auto' | 'mute-and-report' | 'bubble';
export interface RuntimeMetadataManager<TPublic extends AnyJson, TSensitive extends AnyJson> {
    /** Add some public metadata -- this should not contain any PII */
    addPublic: (getData: ProvideMetadata<TPublic>, onError?: MetadataErrorHandling) => Promise<void>;
    /** Add some potentially sensitive metadata -- this may include PII, but unnecessary data should never be tracked (this is a good fit for command args for instance) */
    addSensitive: (getData: ProvideMetadata<TSensitive>, onError?: MetadataErrorHandling) => Promise<void>;
    /** Get a snapshot of the tracked public data */
    getAllPublic: () => Partial<TPublic>;
    /** Get a snapshot of the tracked sensitive data */
    getAllSensitive: () => Partial<TSensitive>;
}
export declare type PublicSchema<T> = T extends RuntimeMetadataManager<infer TPublic, infer _TSensitive> ? TPublic : never;
export declare type SensitiveSchema<T> = T extends RuntimeMetadataManager<infer _TPublic, infer TSensitive> ? TSensitive : never;
/**
 * Creates a container for metadata collected at runtime.
 *
 * The container provides async-safe functions for extracting the gathered metadata, and for setting it.
 *
 */
export declare function createRuntimeMetadataContainer<TPublic extends AnyJson, TSensitive extends AnyJson = {
    [key: string]: never;
}>(): RuntimeMetadataManager<TPublic, TSensitive>;
declare type CmdFieldsFromMonorail = PickByPrefix<MonorailEventPublic, 'cmd_all_'> & PickByPrefix<MonorailEventPublic, 'cmd_app_'>;
declare const coreData: RuntimeMetadataManager<CmdFieldsFromMonorail, {
    commandStartOptions: {
        startTime: number;
        startCommand: string;
        startTopic?: string;
        startArgs: string[];
    };
}>;
export declare const getAllPublic: () => Partial<CmdFieldsFromMonorail>, getAllSensitive: () => Partial<{
    commandStartOptions: {
        startTime: number;
        startCommand: string;
        startTopic?: string;
        startArgs: string[];
    };
}>, addPublic: (getData: ProvideMetadata<CmdFieldsFromMonorail>, onError?: MetadataErrorHandling | undefined) => Promise<void>, addSensitive: (getData: ProvideMetadata<{
    commandStartOptions: {
        startTime: number;
        startCommand: string;
        startTopic?: string;
        startArgs: string[];
    };
}>, onError?: MetadataErrorHandling | undefined) => Promise<void>;
export declare type Public = PublicSchema<typeof coreData>;
export declare type Sensitive = SensitiveSchema<typeof coreData>;
export {};
