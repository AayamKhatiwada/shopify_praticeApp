{"version":3,"file":"log.js","sourceRoot":"","sources":["../src/log.ts"],"names":[],"mappings":"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","sourcesContent":["import {isUnitTest} from './environment/local.js'\nimport constants from './constants.js'\nimport {generateRandomUUID} from './id.js'\nimport {\n  mkdirSync as fileMkdirSync,\n  size as fileSize,\n  touchSync as fileTouchSync,\n  readSync as fileReadSync,\n} from './file.js'\nimport {join as pathJoin} from './path.js'\nimport {consoleLog} from './output.js'\nimport {page} from './system.js'\nimport * as ui from './ui.js'\nimport {promisify} from 'node:util'\nimport {Stream, Transform, TransformCallback, TransformOptions} from 'node:stream'\nimport {WriteStream, createWriteStream, createReadStream, unlinkSync} from 'node:fs'\nimport {EOL} from 'node:os'\n\nconst logFileName = 'shopify.cli.log'\nconst maxLogFileSize = 5 * 1024 * 1024\nconst maxLogFileSizeToTruncate = 30 * 1024 * 1024\nlet logFileStream: WriteStream\nlet commandUuid: string\nlet logFilePath: string\n\ninterface LinesTruncatorTransformerOptions {\n  fileSize: number\n  maxFileSize?: number\n  maxFileSizeToTruncate?: number\n}\nexport class LinesTruncatorTransformer extends Transform {\n  linesToRetain: string[] = []\n  lastLineCompleted = true\n  contentSize = 0\n  options: LinesTruncatorTransformerOptions\n\n  constructor(truncatorOptions: LinesTruncatorTransformerOptions, opts?: TransformOptions) {\n    super(opts)\n    this.options = truncatorOptions\n  }\n\n  _transform(chunk: unknown, encoding: BufferEncoding, callback: TransformCallback): void {\n    if (this.shouldTruncate(chunk)) {\n      this.truncate(chunk)\n    }\n    callback()\n  }\n\n  _flush(callback: TransformCallback): void {\n    this.push(this.linesToRetain.join(EOL))\n    callback()\n  }\n\n  shouldTruncate(chunk: unknown): boolean {\n    this.contentSize += (chunk as string).toString().length\n    return this.options.fileSize - this.contentSize < (this.options.maxFileSizeToTruncate ?? maxLogFileSizeToTruncate)\n  }\n\n  truncate(chunk: unknown) {\n    const tokens = (chunk as string).toString().split(EOL)\n\n    this.completeLastLine(tokens)\n    // last splitted token will be an empty string when last character is a breakline\n    this.lastLineCompleted = tokens[tokens.length - 1] === ''\n    if (this.lastLineCompleted) {\n      tokens.pop()\n    }\n    this.linesToRetain = this.linesToRetain.concat(tokens)\n\n    const numLinesToRetain = this.calculateNumLinesToRetain()\n    if (this.linesToRetain.length > numLinesToRetain) {\n      this.linesToRetain = this.linesToRetain.splice(this.linesToRetain.length - numLinesToRetain)\n    }\n  }\n\n  // Lines retained length average is used so the number of lines depends on the length of them\n  calculateNumLinesToRetain() {\n    return Math.floor(\n      (this.options.maxFileSize ?? maxLogFileSize) /\n        (this.linesToRetain.map((line) => line.length).reduce((l1, l2) => l1 + l2, 0) / this.linesToRetain.length),\n    )\n  }\n\n  completeLastLine(tokens: string[]) {\n    if (this.lastLineCompleted) {\n      return\n    }\n\n    const remainingToken = tokens.shift() ?? ''\n    const incompleteToken = this.linesToRetain[this.linesToRetain.length - 1] ?? ''\n    this.linesToRetain[this.linesToRetain.length - 1] = incompleteToken.concat(remainingToken)\n  }\n}\n\nexport async function initiateLogging(options: {logDir?: string; override?: boolean} = {}) {\n  if (isUnitTest()) return\n  commandUuid = generateRandomUUID()\n  logFilePath = getLogFilePath(options)\n  await truncateLogs(logFilePath)\n  logFileStream = createWriteStream(logFilePath, {flags: 'a'})\n}\n\nexport function closeLogging() {\n  if (logFileExists()) {\n    logFileStream.end()\n  }\n}\n\n// DO NOT USE THIS FUNCTION DIRECTLY under normal circumstances.\n// It is exported purely for use in cases where output is already being logged\n// to the terminal but is not reflected in the logfile, e.g. Listr output.\nexport function logToFile(message: string, logLevel: string): void {\n  // If file logging hasn't been initiated, skip it\n  if (!logFileExists()) return\n  const timestamp = new Date().toISOString()\n  const logContents = `[${timestamp} ${commandUuid} ${logLevel}]: ${message}\\n`\n  logFileStream.write(logContents)\n}\n\nexport async function pageLogs({lastCommand}: {lastCommand: boolean}) {\n  const logDir = constants.paths.directories.cache.path()\n  const logFile = pathJoin(logDir, logFileName)\n  // Ensure file exists in case they deleted it or something\n  fileTouchSync(logFile)\n  if (lastCommand) {\n    printLastCommand(logFile)\n  } else {\n    await page(logFile)\n  }\n}\n\nfunction getLogFilePath(options: {logDir?: string; override?: boolean} = {}) {\n  if (!logFilePath || options.override) {\n    const logDir = options.logDir || constants.paths.directories.cache.path()\n    fileMkdirSync(logDir)\n    logFilePath = pathJoin(logDir, logFileName)\n    fileTouchSync(logFilePath)\n  }\n\n  return logFilePath\n}\n\n// Shaves off older log lines if logs are over maxLogFileSize long.\nasync function truncateLogs(logFile: string) {\n  const size = await fileSize(logFile)\n  if (size < maxLogFileSize) {\n    return\n  }\n  const list = ui.newListr([\n    {\n      title: 'Truncation of the log file',\n      task: async (_, task) => {\n        task.title = `Starting the truncation of the ${Math.floor(size / (1024 * 1024)).toLocaleString(\n          'en-US',\n        )}MB log file`\n        const tmpLogFile = logFile.concat('.tmp')\n        const truncateLines = new LinesTruncatorTransformer({fileSize: size})\n        const pipeline = promisify(Stream.pipeline)\n        await pipeline(createReadStream(logFile), truncateLines, createWriteStream(tmpLogFile))\n        await pipeline(createReadStream(tmpLogFile), createWriteStream(logFile))\n        unlinkSync(tmpLogFile)\n        task.title = 'Finished log truncation process'\n      },\n    },\n  ])\n  await list.run()\n}\n\nfunction logFileExists(): boolean {\n  return Boolean(logFileStream)\n}\n\nfunction printLastCommand(logFile: string): void {\n  const contents = fileReadSync(logFile).split('\\n')\n  const uuids = contents\n    .map(logfileLineUUID)\n    .filter((uuid) => uuid)\n    .reverse()\n  // 2nd unique UUID, because the currently running command will be the 1st\n  const relevantUuid = Array.from(new Set(uuids))[1]\n  if (relevantUuid) {\n    consoleLog(relevantLines(contents, relevantUuid).join('\\n'))\n  }\n}\n\nfunction relevantLines(contents: string[], relevantUuid: string): string[] {\n  // We run through the file line by line, keeping track of the most recently\n  // encountered UUID.\n  //\n  // If the current line has a UUID, it's a new logged unit and should be\n  // considered. Otherwise, the line is related to the most recent UUID.\n  let mostRecentUuid = ''\n  return contents.filter((line: string) => {\n    const currentUuid = logfileLineUUID(line) || mostRecentUuid\n    mostRecentUuid = currentUuid\n    return currentUuid === relevantUuid\n  })\n}\n\nfunction logfileLineUUID(line: string): string | null {\n  // Log lines look like:\n  //\n  //         timestamp                        UUID                               contents\n  // ===========================================================================================\n  // [2022-07-20T08:51:40.296Z 5288e1da-a06a-4f96-b1a6-e34fcdd7b416 DEBUG]: Running command logs\n  // ===========================================================================================\n  //\n  // There may be subsequent lines if the contents section is multi-line.\n  //\n  const match = line.match(/^\\[\\S+ ([0-9a-f]{8}(-[0-9a-f]{4}){3}-[0-9a-f]{12}) [A-Z]+\\]/)\n  return match && match[1]!\n}\n"]}