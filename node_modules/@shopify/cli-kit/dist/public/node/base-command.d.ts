import { Command, Interfaces } from '@oclif/core';
declare abstract class BaseCommand extends Command {
    static analyticsNameOverride(): string | undefined;
    catch(error: Error & {
        exitCode?: number | undefined;
    }): Promise<void>;
    protected init(): Promise<any>;
    protected parse<TFlags extends Interfaces.FlagOutput & {
        path?: string;
        verbose?: boolean;
    }, TArgs extends Interfaces.OutputArgs>(options?: Interfaces.Input<TFlags> | undefined, argv?: string[] | undefined): Promise<Interfaces.ParserOutput<TFlags, TArgs>>;
    protected resultWithPreset<TFlags extends Interfaces.FlagOutput & {
        path?: string;
        verbose?: boolean;
    }, TArgs extends Interfaces.OutputArgs>(options: Interfaces.Input<TFlags> | undefined, argv: string[] | undefined, originalResult: Interfaces.ParserOutput<TFlags, TArgs>): Promise<Interfaces.ParserOutput<TFlags, TArgs>>;
    protected presetsPath(rawFlags: {
        path?: string;
    }): Promise<string>;
    protected findUpForPresets(): boolean;
}
export declare function addFromParsedFlags(flags: {
    path?: string;
    verbose?: boolean;
}): Promise<void>;
export default BaseCommand;
