import { CustomInput } from './inquirer/input.js';
import { CustomAutocomplete } from './inquirer/autocomplete.js';
import { CustomSelect } from './inquirer/select.js';
import { CustomPassword } from './inquirer/password.js';
import inquirer from 'inquirer';
import fuzzy from 'fuzzy';
export async function run(question) {
    const questionName = question.name;
    return (await inquirer.prompt(question, { ...question.choices }))[questionName];
}
export function mapper(question) {
    switch (question.type) {
        case 'input':
            inquirer.registerPrompt('custom-input', CustomInput);
            return {
                ...question,
                type: 'custom-input',
            };
        case 'password':
            inquirer.registerPrompt('custom-password', CustomPassword);
            return {
                ...question,
                type: 'custom-password',
            };
        case 'select':
            inquirer.registerPrompt('custom-select', CustomSelect);
            return {
                ...question,
                type: 'custom-select',
                source: getAutompleteFilterType(),
                choices: question.choices ? groupAndMapChoices(question.choices) : undefined,
            };
        case 'autocomplete':
            inquirer.registerPrompt('autocomplete', CustomAutocomplete);
            return {
                ...question,
                type: 'autocomplete',
                source: getAutompleteFilterType(),
            };
    }
}
function fuzzyFilter(answers, input = '') {
    return new Promise((resolve) => {
        resolve(fuzzy
            .filter(input, Object.values(answers), {
            extract(el) {
                return el.name;
            },
        })
            .map((el) => el.original));
    });
}
function containsFilter(answers, input = '') {
    return new Promise((resolve) => {
        resolve(Object.values(answers).filter((answer) => !answer.name || answer.name.includes(input)));
    });
}
function getAutompleteFilterType() {
    return process.env.SHOPIFY_USE_AUTOCOMPLETE_FILTER === 'fuzzy' ? fuzzyFilter : containsFilter;
}
export function groupAndMapChoices(choices) {
    const initialGroups = [];
    // Switched from choices with group information to groups with a list of choices
    const groups = choices.reduce((finalChoices, choice) => {
        const currentGroup = choice.group ?? { name: 'Other', order: Number.MAX_SAFE_INTEGER };
        const existingGroup = finalChoices.find((group) => group.name === currentGroup.name);
        if (existingGroup) {
            existingGroup.choices.push(choice);
        }
        else {
            finalChoices.push({ ...currentGroup, choices: [choice] });
        }
        return finalChoices;
    }, initialGroups);
    const sortedGroups = groups.sort((g1, g2) => g1.order - g2.order);
    const grouped = sortedGroups.length > 1 || sortedGroups[0].order !== Number.MAX_SAFE_INTEGER;
    // Mapped the group with a list of extensions to a list of inquirer choices including group separators
    return sortedGroups.flatMap((group) => {
        const finalChoices = [];
        if (grouped && group.name) {
            finalChoices.push({ type: 'separator', line: '' });
            finalChoices.push({ type: 'separator', line: group.name });
        }
        finalChoices.push(...group.choices);
        return finalChoices;
    });
}
//# sourceMappingURL=executor.js.map