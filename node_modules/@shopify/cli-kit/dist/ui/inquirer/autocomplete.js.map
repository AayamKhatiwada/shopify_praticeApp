{"version":3,"file":"autocomplete.js","sourceRoot":"","sources":["../../../src/ui/inquirer/autocomplete.ts"],"names":[],"mappings":"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","sourcesContent":["import colors from '../../public/node/colors.js'\nimport AutocompletePrompt from 'inquirer-autocomplete-prompt'\nimport DistinctChoice from 'inquirer/lib/objects/choices'\nimport inquirer from 'inquirer'\n\nimport Paginator from 'inquirer/lib/utils/paginator.js'\nimport {Interface} from 'readline'\n\nexport class CustomAutocomplete extends AutocompletePrompt {\n  protected isAutocomplete: boolean\n\n  constructor(questions: inquirer.Question<inquirer.Answers>, rl: Interface, answers: inquirer.Answers) {\n    super(questions, rl, answers)\n    this.isAutocomplete = true\n    this.paginator = new Paginator(this.screen, {\n      isInfinite: false,\n    })\n  }\n\n  protected render(error?: string) {\n    let content = this.getQuestion()\n    let bottomContent = ''\n\n    if (this.status !== 'answered') {\n      content += colors.gray('… ')\n    }\n\n    if (this.status === 'answered') {\n      content += `${colors.dim('·')} ${colors.magenta(this.shortAnswer || this.answerName || this.answer)}`\n      process.stdout.write('\\u001b[?25h')\n    } else if (this.searching) {\n      content += this.rl.line\n      bottomContent += `  ${colors.magenta.dim('Searching...')}`\n    } else if (this.nbChoices) {\n      const choicesStr = listRender(this.currentChoices, this.selected, this.isAutocomplete ? this.rl.line : undefined)\n      content += this.isAutocomplete ? this.rl.line : ''\n      const indexPosition = this.selected\n      let realIndexPosition = 0\n      this.currentChoices.choices.every((choice, index: number) => {\n        if (index > indexPosition) {\n          return false\n        }\n        if (choice.type === 'separator') {\n          return true\n        }\n        const name = choice.name\n        realIndexPosition += name ? name.split('\\n').length : 0\n        return true\n      })\n      bottomContent += this.paginator.paginate(choicesStr, realIndexPosition, this.isAutocomplete ? 10 : 500)\n    } else {\n      content += this.rl.line\n      bottomContent += `  ${colors.magenta('No matching choices')}`\n    }\n\n    if (error) {\n      bottomContent += `\\n${colors.magenta('>> ')}${error}`\n    }\n\n    this.firstRender = false\n\n    this.screen.render(content, bottomContent)\n  }\n\n  protected getQuestion(): string {\n    return `${this.prefix()} ${colors.bold(this.opt.message)}${this.opt.suffix}${colors.reset(' ')}`\n  }\n\n  protected prefix(): string {\n    const color = colors.magenta.bold\n    return this.status === 'answered' ? color('✔') : color('?')\n  }\n}\n\nfunction listRender(choices: DistinctChoice, pointer: number, searchToken?: string): string {\n  let output = ''\n  let separatorOffset = 0\n\n  choices.forEach((choice, i: number) => {\n    if (choice.type === 'separator') {\n      separatorOffset++\n      if (choice.line.includes('──────────────')) {\n        output += `\\n`\n      } else {\n        output += `  ${colors.dim.underline(choice)}\\n`\n      }\n      return\n    }\n\n    if (choice.disabled) {\n      separatorOffset++\n      output += `  - ${choice.name}`\n      output += ` (${typeof choice.disabled === 'string' ? choice.disabled : 'Disabled'})`\n      output += '\\n'\n      return\n    }\n\n    const isSelected = i - separatorOffset === pointer\n    let line = (isSelected ? '> ' : '  ') + choice.name\n\n    if (isSelected) {\n      line = colors.magenta(line)\n    }\n\n    if (searchToken) {\n      line = line\n        .split(searchToken)\n        .map((token) => (isSelected ? colors.magenta(token) : token))\n        .join(colors.magenta.dim(searchToken))\n    } else if (isSelected) {\n      line = colors.magenta(line)\n    }\n\n    output += `${line} \\n`\n  })\n\n  return output.replace(/\\n$/, '')\n}\n"]}