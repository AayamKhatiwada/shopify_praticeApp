import colors from '../../public/node/colors.js';
import Input from 'inquirer/lib/prompts/input.js';
import readline from 'readline';
export class CustomInput extends Input {
    constructor(questions, rl, answers) {
        super(questions, rl, answers);
        this.isPassword = false;
    }
    render(error) {
        const color = colors.magenta;
        const isFinal = this.status === 'answered';
        let prompt = this.getQuestion();
        let bottomContent = '';
        if (isFinal) {
            prompt += `${colors.dim('·')} ${color(this.formatContent(this.answer))}`;
        }
        else {
            prompt += `\n${color('>')} ${this.rl.line ? this.formatContent(this.rl.line) : color.dim(this.opt.default)}`;
            bottomContent = '─'.repeat(Math.max(this.rl.line.length, 30));
            bottomContent = `  ${color(bottomContent)}`;
            if (error) {
                bottomContent += `\n\n  ${colors.red(`! ${error}`)}`;
            }
        }
        this.screen.render(prompt, bottomContent);
        if (!isFinal && !this.rl.line) {
            readline.cursorTo(process.stdout, 2);
        }
    }
    getQuestion() {
        return `${this.prefix()} ${colors.bold(this.opt.message)}${this.opt.suffix}${colors.reset(' ')}`;
    }
    prefix() {
        const color = colors.magenta.bold;
        return this.status === 'answered' ? color('✔') : color('?');
    }
    onError(data) {
        this.rl.write(data.value === this.opt.default ? '' : data.value);
        this.render(data.isValid);
    }
    formatContent(content) {
        return this.isPassword ? colors.gray('*'.repeat(content.length)) : content;
    }
}
//# sourceMappingURL=input.js.map