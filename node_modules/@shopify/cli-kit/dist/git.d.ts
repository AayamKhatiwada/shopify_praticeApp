import { Abort } from './error.js';
import { DefaultLogFields, ListLogLine } from 'simple-git';
export declare const factory: import("simple-git").SimpleGitFactory;
export declare const GitNotPresentError: () => Abort;
export declare const OutsideGitDirectoryError: (directory: string) => Abort;
export declare const NoCommitError: () => Abort;
export declare const DetachedHeadError: () => Abort;
export declare function initializeRepository(directory: string, initialBranch?: string): Promise<void>;
export interface GitIgnoreTemplate {
    [section: string]: string[];
}
export declare function createGitIgnore(directory: string, template: GitIgnoreTemplate): void;
export declare function downloadRepository({ repoUrl, destination, progressUpdater, shallow, }: {
    repoUrl: string;
    destination: string;
    progressUpdater?: (statusString: string) => void;
    shallow?: boolean;
}): Promise<void>;
export declare function getLatestCommit(directory?: string): Promise<DefaultLogFields & ListLogLine>;
export declare function addAll(directory?: string): Promise<void>;
export declare function commit(message: string, options?: {
    directory?: string;
    author?: string;
}): Promise<string>;
export declare function getHeadSymbolicRef(directory?: string): Promise<string>;
/**
 * If "git" is not present in the environment it throws
 * an abort error.
 */
export declare function ensurePresentOrAbort(): Promise<void>;
/**
 * If command run from outside a .git directory tree
 * it throws an abort error.
 */
export declare function ensureInsideGitDirectory(directory?: string): Promise<void>;
