import BaseCommand from './public/node/base-command.js';
import { CommandContent } from './public/node/hooks/prerun.js';
import { Config, Interfaces } from '@oclif/core';
interface StartOptions {
    commandContent: CommandContent;
    args: string[];
    currentTime?: number;
    commandClass?: Interfaces.Command.Class | typeof BaseCommand;
}
export declare const start: ({ commandContent, args, currentTime, commandClass }: StartOptions) => Promise<void>;
interface ReportEventOptions {
    config: Interfaces.Config;
    errorMessage?: string;
}
/**
 * Report an analytics event, sending it off to Monorail -- Shopify's internal analytics service.
 *
 * The payload for an event includes both generic data, and data gathered from installed plug-ins.
 *
 */
export declare function reportEvent(options: ReportEventOptions): Promise<void>;
/**
 * Return the name of the tunnel provider used to send analytics. Returns 'localhost' or provider name if any of those
 * strings are included in the {@link tunnelUrl} param. Returns 'custom' otherwise
 *
 * @param options - Oclif configuration. Needed to call the hook for retrieving the list of tunner providers
 * @param tunnelUrl - Tunnel url. Used as pattern to match provider name
 * @returns 'localhost' or provider name if any of those strings are included in
 *  the tunnelUrl or 'custom' otherwise
 */
export declare function getAnalyticsTunnelType(options: Config, tunnelUrl: string): Promise<string | undefined>;
export declare function getEnvironmentData(config: Interfaces.Config): Promise<{
    uname: string;
    env_ci: boolean;
    env_ci_platform: string | undefined;
    env_plugin_installed_any_custom: boolean;
    env_plugin_installed_shopify: string;
    env_shell: string;
    env_web_ide: "spin" | "codespaces" | "gitpod" | "localhost" | undefined;
    env_device_id: string;
    env_cloud: "spin" | "codespaces" | "gitpod" | "localhost";
    env_package_manager: "yarn" | "npm" | "pnpm" | undefined;
}>;
export {};
