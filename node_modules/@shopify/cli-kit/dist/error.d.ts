import { Message } from './output.js';
import { TextTokenItem } from './private/node/ui/components/TokenizedText.js';
export { ExtendableError } from 'ts-error';
declare enum FatalErrorType {
    Abort = 0,
    AbortSilent = 1,
    Bug = 2
}
export declare class CancelExecution extends Error {
}
/**
 * A fatal error represents an error shouldn't be rescued and that causes the execution to terminate.
 * There shouldn't be code that catches fatal errors.
 */
export declare abstract class Fatal extends Error {
    tryMessage: TextTokenItem | null;
    type: FatalErrorType;
    /**
     *
     * @param message - The error message
     * @param type - The type of fatal error
     * @param tryMessage - The message that recommends next steps to the user.
     *                     You can pass a string a {@link TokenizedString} or a {@link TextTokenItem}
     *                     if you need to style the message inside the error Banner component.
     */
    constructor(message: Message, type: FatalErrorType, tryMessage?: TextTokenItem | Message | null);
}
/**
 * An abort error is a fatal error that shouldn't be reported as a bug.
 * Those usually represent unexpected scenarios that we can't handle and that usually require some action from the developer
 */
export declare class Abort extends Fatal {
    constructor(message: Message, tryMessage?: TextTokenItem | Message | null);
}
/**
 * An external error is similar to Abort but has extra command and args attributes.
 * This is useful to represent errors coming from external commands, usually executed by execa.
 */
export declare class ExternalError extends Fatal {
    command: string;
    args: string[];
    constructor(message: Message, command: string, args: string[], tryMessage?: TextTokenItem | Message | null);
}
export declare class AbortSilent extends Fatal {
    constructor();
}
/**
 * A bug error is an error that represents a bug and therefore should be reported.
 */
export declare class Bug extends Fatal {
    constructor(message: Message, tryMessage?: TextTokenItem | null);
}
/**
 * A function that handles errors that blow up in the CLI.
 * @param error - Error to be handled.
 * @returns A promise that resolves with the error passed.
 */
export declare function handler(error: unknown): Promise<unknown>;
export declare function mapper(error: unknown): Promise<unknown>;
export declare function isFatal(error: unknown): error is Fatal;
export declare function shouldReport(error: unknown): boolean;
/**
 * Stack traces usually have file:// - we strip that and also remove the Windows drive designation
 *
 */
export declare function cleanSingleStackTracePath(filePath: string): string;
