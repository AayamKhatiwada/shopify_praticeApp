{"version":3,"file":"store.js","sourceRoot":"","sources":["../src/store.ts"],"names":[],"mappings":"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","sourcesContent":["import {content, token, debug} from './output.js'\nimport constants from './constants.js'\nimport Conf, {Schema} from 'conf'\n\nconst migrations = {}\n\nexport interface CachedAppInfo {\n  directory: string\n  appId?: string\n  title?: string\n  orgId?: string\n  storeFqdn?: string\n  updateURLs?: boolean\n  tunnelPlugin?: string\n}\n\ninterface ConfSchema {\n  appInfo: CachedAppInfo[]\n  themeStore: string\n  session: string\n}\n\nconst schema = {\n  appInfo: {\n    type: 'array',\n    items: {\n      type: 'object',\n      properties: {\n        appId: {\n          type: 'string',\n        },\n        orgId: {\n          type: 'string',\n        },\n        storeFqdn: {\n          type: 'string',\n        },\n      },\n    },\n  },\n} as unknown as Schema<ConfSchema>\n\nlet _instance: CLIKitStore | undefined\n\nexport async function cliKitStore() {\n  if (!_instance) {\n    // eslint-disable-next-line require-atomic-updates\n    _instance = new CLIKitStore({\n      schema,\n      migrations,\n      projectName: 'shopify-cli-kit',\n      projectVersion: await constants.versions.cliKit(),\n    })\n  }\n  return _instance\n}\n\nexport async function getAppInfo(directory: string): Promise<CachedAppInfo | undefined> {\n  const store = await cliKitStore()\n  return store.getAppInfo(directory)\n}\n\nexport async function setAppInfo(options: {\n  directory: string\n  appId?: string\n  title?: string\n  storeFqdn?: string\n  orgId?: string\n  updateURLs?: boolean\n  tunnelPlugin?: string\n}): Promise<void> {\n  const store = await cliKitStore()\n  store.setAppInfo(options)\n}\n\nexport async function clearAppInfo(directory: string): Promise<void> {\n  const store = await cliKitStore()\n  store.clearAppInfo(directory)\n}\n\nexport async function getThemeStore(): Promise<string | undefined> {\n  const store = await cliKitStore()\n  return store.getThemeStore()\n}\n\nexport async function setThemeStore(themeStore: string): Promise<void> {\n  const store = await cliKitStore()\n  store.setThemeStore(themeStore)\n}\n\nexport async function getSession(): Promise<string | undefined> {\n  const store = await cliKitStore()\n  return store.getSession()\n}\n\nexport async function setSession(session: string): Promise<void> {\n  const store = await cliKitStore()\n  store.setSession(session)\n}\n\nexport async function removeSession(): Promise<void> {\n  const store = await cliKitStore()\n  store.removeSession()\n}\n\nexport async function clearAllAppInfo(): Promise<void> {\n  const store = await cliKitStore()\n  store.clearAllAppInfo()\n}\n\nexport class CLIKitStore extends Conf<ConfSchema> {\n  getAppInfo(directory: string): CachedAppInfo | undefined {\n    debug(content`Reading cached app information for directory ${token.path(directory)}...`)\n    const apps = this.get('appInfo') ?? []\n    return apps.find((app: CachedAppInfo) => app.directory === directory)\n  }\n\n  setAppInfo(options: {\n    directory: string\n    appId?: string\n    title?: string\n    storeFqdn?: string\n    orgId?: string\n    updateURLs?: boolean\n    tunnelPlugin?: string\n  }): void {\n    debug(content`Storing app information for directory ${token.path(options.directory)}:${token.json(options)}`)\n    const apps = this.get('appInfo') ?? []\n    const index = apps.findIndex((saved: CachedAppInfo) => saved.directory === options.directory)\n    if (index === -1) {\n      apps.push(options)\n    } else {\n      const app: CachedAppInfo = apps[index]!\n      apps[index] = {\n        directory: options.directory,\n        appId: options.appId ?? app.appId,\n        title: options.title ?? app.title,\n        storeFqdn: options.storeFqdn ?? app.storeFqdn,\n        orgId: options.orgId ?? app.orgId,\n        updateURLs: options.updateURLs ?? app.updateURLs,\n        tunnelPlugin: options.tunnelPlugin ?? app.tunnelPlugin,\n      }\n    }\n    this.set('appInfo', apps)\n  }\n\n  clearAppInfo(directory: string): void {\n    debug(content`Clearing app information for directory ${token.path(directory)}...`)\n    const apps = this.get('appInfo') ?? []\n    const index = apps.findIndex((saved: CachedAppInfo) => saved.directory === directory)\n    if (index !== -1) {\n      apps.splice(index, 1)\n    }\n    this.set('appInfo', apps)\n  }\n\n  clearAllAppInfo(): void {\n    debug(content`Clearing all app information...`)\n    this.set('appInfo', [])\n  }\n\n  getThemeStore(): string | undefined {\n    debug(content`Getting theme store...`)\n    return this.get('themeStore')\n  }\n\n  setThemeStore(themeStore: string): void {\n    debug(content`Setting theme store...`)\n    this.set('themeStore', themeStore)\n  }\n\n  getSession(): string | undefined {\n    debug(content`Getting session store...`)\n    return this.get('sessionStore')\n  }\n\n  setSession(session: string): void {\n    debug(content`Setting session store...`)\n    this.set('sessionStore', session)\n  }\n\n  removeSession(): void {\n    debug(content`Removing session store...`)\n    this.set('sessionStore', '')\n  }\n}\n"]}