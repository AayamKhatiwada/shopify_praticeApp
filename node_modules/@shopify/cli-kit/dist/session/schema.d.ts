import { define } from '../schema.js';
/**
 * The schema represents an Identity token.
 */
declare const IdentityTokenSchema: define.ZodObject<{
    accessToken: define.ZodString;
    refreshToken: define.ZodString;
    expiresAt: define.ZodEffects<define.ZodDate, Date, Date>;
    scopes: define.ZodArray<define.ZodString, "many">;
}, "strip", define.ZodTypeAny, {
    accessToken: string;
    refreshToken: string;
    expiresAt: Date;
    scopes: string[];
}, {
    accessToken: string;
    refreshToken: string;
    expiresAt: Date;
    scopes: string[];
}>;
/**
 * The schema represents an application token.
 */
declare const ApplicationTokenSchema: define.ZodObject<{
    accessToken: define.ZodString;
    expiresAt: define.ZodEffects<define.ZodDate, Date, Date>;
    scopes: define.ZodArray<define.ZodString, "many">;
}, "strip", define.ZodTypeAny, {
    accessToken: string;
    expiresAt: Date;
    scopes: string[];
}, {
    accessToken: string;
    expiresAt: Date;
    scopes: string[];
}>;
/**
 * This schema represents the format of the session
 * that we cache in the system to avoid unnecessary
 * token exchanges.
 *
 * @example
 * ```
 * {
 *    "accounts.shopify.com": {
 *      "identity": {...} // IdentityTokenSchema
 *      "applications": {
 *        "${domain}-application-id": {  // Admin APIs includes domain in the key
 *          "accessToken": "...",
 *        },
 *        "$application-id": { // ApplicationTokenSchema
 *          "accessToken": "...",
 *        },
 *      }
 *    },
 *    "identity.spin.com": {...}
 * }
 * ```
 */
export declare const SessionSchema: define.ZodObject<{}, "strip", define.ZodObject<{
    /**
     * It contains the identity token. Before usint it, we exchange it
     * to get a token that we can use with different applications. The exchanged
     * tokens for the applications are stored under applications.
     */
    identity: define.ZodObject<{
        accessToken: define.ZodString;
        refreshToken: define.ZodString;
        expiresAt: define.ZodEffects<define.ZodDate, Date, Date>;
        scopes: define.ZodArray<define.ZodString, "many">;
    }, "strip", define.ZodTypeAny, {
        accessToken: string;
        refreshToken: string;
        expiresAt: Date;
        scopes: string[];
    }, {
        accessToken: string;
        refreshToken: string;
        expiresAt: Date;
        scopes: string[];
    }>;
    /**
     * It contains exchanged tokens for the applications the CLI
     * authenticates with. Tokens are scoped under the fqdn of the applications.
     */
    applications: define.ZodObject<{}, "strip", define.ZodObject<{
        accessToken: define.ZodString;
        expiresAt: define.ZodEffects<define.ZodDate, Date, Date>;
        scopes: define.ZodArray<define.ZodString, "many">;
    }, "strip", define.ZodTypeAny, {
        accessToken: string;
        expiresAt: Date;
        scopes: string[];
    }, {
        accessToken: string;
        expiresAt: Date;
        scopes: string[];
    }>, {
        [x: string]: {
            accessToken: string;
            expiresAt: Date;
            scopes: string[];
        };
    }, {
        [x: string]: {
            accessToken: string;
            expiresAt: Date;
            scopes: string[];
        };
    }>;
}, "strip", define.ZodTypeAny, {
    identity: {
        accessToken: string;
        refreshToken: string;
        expiresAt: Date;
        scopes: string[];
    };
    applications: {
        [x: string]: {
            accessToken: string;
            expiresAt: Date;
            scopes: string[];
        };
    };
}, {
    identity: {
        accessToken: string;
        refreshToken: string;
        expiresAt: Date;
        scopes: string[];
    };
    applications: {
        [x: string]: {
            accessToken: string;
            expiresAt: Date;
            scopes: string[];
        };
    };
}>, {
    [x: string]: {
        identity: {
            accessToken: string;
            refreshToken: string;
            expiresAt: Date;
            scopes: string[];
        };
        applications: {
            [x: string]: {
                accessToken: string;
                expiresAt: Date;
                scopes: string[];
            };
        };
    };
}, {
    [x: string]: {
        identity: {
            accessToken: string;
            refreshToken: string;
            expiresAt: Date;
            scopes: string[];
        };
        applications: {
            [x: string]: {
                accessToken: string;
                expiresAt: Date;
                scopes: string[];
            };
        };
    };
}>;
export declare type Session = define.infer<typeof SessionSchema>;
export declare type IdentityToken = define.infer<typeof IdentityTokenSchema>;
export declare type ApplicationToken = define.infer<typeof ApplicationTokenSchema>;
export {};
