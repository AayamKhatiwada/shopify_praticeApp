{"version":3,"file":"token.js","sourceRoot":"","sources":["../../src/session/token.ts"],"names":[],"mappings":"AAAA;;;GAGG;AACH,MAAM,KAAK;IA2BT,YAAY,OAAsG;QAChH,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAA;QACxB,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAA;QACtC,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAA;QACxC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAA;QAClC,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAA;IAC9B,CAAC;IAED;;;OAGG;IACH,IAAI,SAAS;QACX,OAAO,IAAI,IAAI,EAAE,GAAG,IAAI,CAAC,SAAS,CAAA;IACpC,CAAC;CACF;AAED,eAAe,KAAK,CAAA","sourcesContent":["/**\n * It represents a temporary token that can be\n * used to send authenticated HTTP requests.\n */\nclass Token {\n  /**\n   * A fully-qualified domain name of the service\n   * this token is for.\n   */\n  fqdn: string\n\n  /**\n   * Access token\n   */\n  accessToken: string\n\n  /**\n   * Token to refresh the access token if it has expired.\n   */\n  refreshToken?: string\n\n  /**\n   * The expiration date of the session\n   */\n  expiresAt: Date\n\n  /**\n   * The list of scopes the token has access to.\n   */\n  scopes: string[]\n\n  constructor(options: {fqdn: string; accessToken: string; refreshToken?: string; expiresAt: Date; scopes: string[]}) {\n    this.fqdn = options.fqdn\n    this.accessToken = options.accessToken\n    this.refreshToken = options.refreshToken\n    this.expiresAt = options.expiresAt\n    this.scopes = options.scopes\n  }\n\n  /**\n   * Returns true if the session is expired.\n   * @returns True if the session is expired.\n   */\n  get isExpired(): boolean {\n    return new Date() > this.expiresAt\n  }\n}\n\nexport default Token\n"]}