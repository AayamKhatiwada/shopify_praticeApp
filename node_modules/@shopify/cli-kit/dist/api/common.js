import { firstPartyDev } from '../environment/local.js';
import constants from '../constants.js';
import { stringifyMessage, content, token as outputToken, token, debug } from '../output.js';
import { Abort, ExtendableError } from '../error.js';
import { ClientError } from 'graphql-request';
import { randomUUID } from 'crypto';
export class RequestClientError extends ExtendableError {
    constructor(message, statusCode) {
        super(message);
        this.statusCode = statusCode;
    }
}
export async function buildHeaders(token) {
    const userAgent = `Shopify CLI; v=${await constants.versions.cliKit()}`;
    const headers = {
        'User-Agent': userAgent,
        // 'Sec-CH-UA': secCHUA, This header requires the Git sha.
        'Sec-CH-UA-PLATFORM': process.platform,
        'X-Request-Id': randomUUID(),
        authorization: `Bearer ${token}`,
        'X-Shopify-Access-Token': `Bearer ${token}`,
        'Content-Type': 'application/json',
        ...(firstPartyDev() && { 'X-Shopify-Cli-Employee': '1' }),
    };
    return headers;
}
/**
 * Removes the sensitive data from the headers and outputs them as a string.
 * @param headers - HTTP headers.
 * @returns A sanitized version of the headers as a string.
 */
export function sanitizedHeadersOutput(headers) {
    const sanitized = {};
    const keywords = ['token', 'authorization'];
    Object.keys(headers).forEach((header) => {
        if (keywords.find((keyword) => header.toLocaleLowerCase().includes(keyword)) === undefined) {
            sanitized[header] = headers[header];
        }
    });
    return Object.keys(sanitized)
        .map((header) => {
        return ` - ${header}: ${sanitized[header]}`;
    })
        .join('\n');
}
export function debugLogRequest(api, query, variables, headers = {}) {
    debug(`
Sending ${token.json(api)} GraphQL request:
${query}

With variables:
${variables ? JSON.stringify(variables, null, 2) : ''}

And headers:
${sanitizedHeadersOutput(headers)}
`);
}
export async function handlingErrors(api, action) {
    try {
        return await action();
    }
    catch (error) {
        if (error instanceof ClientError) {
            const errorMessage = stringifyMessage(content `
  The ${token.raw(api)} GraphQL API responded unsuccessfully with the HTTP status ${`${error.response.status}`} and errors:

  ${outputToken.json(error.response.errors)}
      `);
            let mappedError;
            if (error.response.status < 500) {
                mappedError = new RequestClientError(errorMessage, error.response.status);
            }
            else {
                mappedError = new Abort(errorMessage);
            }
            mappedError.stack = error.stack;
            throw mappedError;
        }
        else {
            throw error;
        }
    }
}
//# sourceMappingURL=common.js.map