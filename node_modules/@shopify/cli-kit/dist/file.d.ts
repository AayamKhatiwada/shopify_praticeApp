/// <reference types="node" />
import fs from 'fs-extra';
export declare function stripUp(path: string, strip: number): string;
/**
 * Creates a temporary directory and ties its lifecycle to the lifecycle of the callback.
 * @param callback - The callback that receives the temporary directory.
 */
export declare function inTemporaryDirectory<T>(callback: (tmpDir: string) => T | Promise<T>): Promise<T>;
/**
 * It reads a file and returns its content as a string using the
 * utf-8 encoding
 * @param path - Path to the file to read.
 * @returns A promise that resolves with the content of the file.
 */
export declare function read(path: string, options?: object): Promise<string>;
/**
 * Given a path, it determines the actual path. This is useful when working
 * with paths that represent symlinks.
 * @param path - Path whose real path will be returned.
 */
export declare function realpath(path: string): Promise<string>;
export declare function readSync(path: string, options?: object): string;
/**
 * Copies a file
 * @param from - Path to the directory or file to be copied.
 * @param to - Destination path.
 */
export declare function copy(from: string, to: string): Promise<void>;
export declare function touch(path: string): Promise<void>;
export declare function appendFile(path: string, content: string): Promise<void>;
export declare function touchSync(path: string): void;
export declare function write(path: string, data: string): Promise<void>;
export declare function writeSync(path: string, data: string): void;
export declare function append(path: string, data: string): Promise<void>;
export declare function appendSync(path: string, data: string): void;
export declare function mkdir(path: string): Promise<void>;
export declare function mkdirSync(path: string): void;
export declare function remove(path: string): Promise<void>;
export declare function removeSync(path: string): void;
export declare function rmdir(path: string, { force }?: {
    force?: boolean;
}): Promise<void>;
export declare function mkTmpDir(): Promise<string>;
export declare function isDirectory(path: string): Promise<boolean>;
export declare function size(path: string): Promise<number>;
export declare function sizeSync(path: string): number;
export declare function createReadStream(path: string): fs.ReadStream;
/**
 * Returns the Date object for the last modification of a file.
 * @param path - Path to the directory or file.
 * @returns A unix timestamp.
 */
export declare function lastUpdated(path: string): Promise<Date>;
/**
 * Returns the unix timestamp of the last modification of a file.
 * @param path - Path to the directory or file.
 * @returns A unix timestamp.
 */
export declare function lastUpdatedTimestamp(path: string): Promise<number | undefined>;
/**
 * Moves a file.
 * @param src - File to be moved.
 * @param dest - Path to be moved to.
 * @param options - Moving options.
 */
export declare function move(src: string, dest: string, options?: {
    overwrite?: boolean;
}): Promise<void>;
/**
 * Changes the permissions of a directory or file.
 * @param path - Path to the file or directory whose permissions will be modified.
 * @param mode - Permissions to set to the file or directory.
 */
export declare function chmod(path: string, mode: number | string): Promise<void>;
/**
 * Checks if a file has executable permissions.
 * @param path - Path to the file whose permissions will be checked.
 */
export declare function hasExecutablePermissions(path: string): Promise<boolean>;
/**
 * Returns true if a file or directory exists
 * @param path - Path to the directory or file.
 * @returns True if it exists.
 */
export declare function exists(path: string): Promise<boolean>;
/**
 * Format a string using prettier. Return the formatted content.
 */
export declare function format(content: string, options: {
    path: string;
}): Promise<string>;
