{"version":3,"file":"render-concurrent.js","sourceRoot":"","sources":["../../../src/testing/fixtures/render-concurrent.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,gBAAgB,EAAC,MAAM,yBAAyB,CAAA;AAGxD,IAAI,qBAAiC,CAAA;AAErC,MAAM,cAAc,GAAG,IAAI,OAAO,CAAO,UAAU,OAAO,EAAE,OAAO;IACjE,qBAAqB,GAAG,OAAO,CAAA;AACjC,CAAC,CAAC,CAAA;AAEF,MAAM,cAAc,GAAG;IACrB,MAAM,EAAE,SAAS;IACjB,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,OAAiB,EAAE,OAAe,EAAE,EAAE;QACrE,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;QACrC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAA;QACtC,MAAM,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAA;QAErC,qBAAqB,EAAE,CAAA;IACzB,CAAC;CACF,CAAA;AAED,MAAM,eAAe,GAAG;IACtB,MAAM,EAAE,UAAU;IAClB,MAAM,EAAE,KAAK,EAAE,MAAgB,EAAE,OAAiB,EAAE,OAAe,EAAE,EAAE;QACrE,MAAM,cAAc,CAAA;QAEpB,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAA;QACtC,MAAM,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAA;QACvC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAA;IACxC,CAAC;CACF,CAAA;AAED,mEAAmE;AACnE,gBAAgB,CAAC,EAAC,SAAS,EAAE,CAAC,cAAc,EAAE,eAAe,CAAC,EAAC,CAAC,CAAA","sourcesContent":["import {Signal} from '../../abort.js'\nimport {renderConcurrent} from '../../public/node/ui.js'\nimport {Writable} from 'form-data'\n\nlet backendPromiseResolve: () => void\n\nconst backendPromise = new Promise<void>(function (resolve, _reject) {\n  backendPromiseResolve = resolve\n})\n\nconst backendProcess = {\n  prefix: 'backend',\n  action: async (stdout: Writable, _stderr: Writable, _signal: Signal) => {\n    stdout.write('first backend message')\n    stdout.write('second backend message')\n    stdout.write('third backend message')\n\n    backendPromiseResolve()\n  },\n}\n\nconst frontendProcess = {\n  prefix: 'frontend',\n  action: async (stdout: Writable, _stderr: Writable, _signal: Signal) => {\n    await backendPromise\n\n    stdout.write('first frontend message')\n    stdout.write('second frontend message')\n    stdout.write('third frontend message')\n  },\n}\n\n// eslint-disable-next-line @typescript-eslint/no-floating-promises\nrenderConcurrent({processes: [backendProcess, frontendProcess]})\n"]}