import { content, token, debug } from './output.js';
import constants from './constants.js';
import Conf from 'conf';
const migrations = {};
const schema = {
    appInfo: {
        type: 'array',
        items: {
            type: 'object',
            properties: {
                appId: {
                    type: 'string',
                },
                orgId: {
                    type: 'string',
                },
                storeFqdn: {
                    type: 'string',
                },
            },
        },
    },
};
let _instance;
export async function cliKitStore() {
    if (!_instance) {
        // eslint-disable-next-line require-atomic-updates
        _instance = new CLIKitStore({
            schema,
            migrations,
            projectName: 'shopify-cli-kit',
            projectVersion: await constants.versions.cliKit(),
        });
    }
    return _instance;
}
export async function getAppInfo(directory) {
    const store = await cliKitStore();
    return store.getAppInfo(directory);
}
export async function setAppInfo(options) {
    const store = await cliKitStore();
    store.setAppInfo(options);
}
export async function clearAppInfo(directory) {
    const store = await cliKitStore();
    store.clearAppInfo(directory);
}
export async function getThemeStore() {
    const store = await cliKitStore();
    return store.getThemeStore();
}
export async function setThemeStore(themeStore) {
    const store = await cliKitStore();
    store.setThemeStore(themeStore);
}
export async function getSession() {
    const store = await cliKitStore();
    return store.getSession();
}
export async function setSession(session) {
    const store = await cliKitStore();
    store.setSession(session);
}
export async function removeSession() {
    const store = await cliKitStore();
    store.removeSession();
}
export async function clearAllAppInfo() {
    const store = await cliKitStore();
    store.clearAllAppInfo();
}
export class CLIKitStore extends Conf {
    getAppInfo(directory) {
        debug(content `Reading cached app information for directory ${token.path(directory)}...`);
        const apps = this.get('appInfo') ?? [];
        return apps.find((app) => app.directory === directory);
    }
    setAppInfo(options) {
        debug(content `Storing app information for directory ${token.path(options.directory)}:${token.json(options)}`);
        const apps = this.get('appInfo') ?? [];
        const index = apps.findIndex((saved) => saved.directory === options.directory);
        if (index === -1) {
            apps.push(options);
        }
        else {
            const app = apps[index];
            apps[index] = {
                directory: options.directory,
                appId: options.appId ?? app.appId,
                title: options.title ?? app.title,
                storeFqdn: options.storeFqdn ?? app.storeFqdn,
                orgId: options.orgId ?? app.orgId,
                updateURLs: options.updateURLs ?? app.updateURLs,
                tunnelPlugin: options.tunnelPlugin ?? app.tunnelPlugin,
            };
        }
        this.set('appInfo', apps);
    }
    clearAppInfo(directory) {
        debug(content `Clearing app information for directory ${token.path(directory)}...`);
        const apps = this.get('appInfo') ?? [];
        const index = apps.findIndex((saved) => saved.directory === directory);
        if (index !== -1) {
            apps.splice(index, 1);
        }
        this.set('appInfo', apps);
    }
    clearAllAppInfo() {
        debug(content `Clearing all app information...`);
        this.set('appInfo', []);
    }
    getThemeStore() {
        debug(content `Getting theme store...`);
        return this.get('themeStore');
    }
    setThemeStore(themeStore) {
        debug(content `Setting theme store...`);
        this.set('themeStore', themeStore);
    }
    getSession() {
        debug(content `Getting session store...`);
        return this.get('sessionStore');
    }
    setSession(session) {
        debug(content `Setting session store...`);
        this.set('sessionStore', session);
    }
    removeSession() {
        debug(content `Removing session store...`);
        this.set('sessionStore', '');
    }
}
//# sourceMappingURL=store.js.map