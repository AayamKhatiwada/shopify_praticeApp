import { fetch } from './http.js';
import { Abort } from './error.js';
import { content, debug } from './output.js';
class GitHubClientError extends Error {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    constructor(url, statusCode, bodyJson) {
        super(`The request to GitHub API URL ${url} failed with status code ${statusCode} and the following error message: ${bodyJson.message}`);
    }
}
export async function getLatestRelease(user, repo, { filter } = { filter: () => true }) {
    debug(content `Getting the latest release of GitHub repository ${user}/${repo}...`);
    const url = `https://api.github.com/repos/${user}/${repo}/releases`;
    const fetchResult = await fetch(url);
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const jsonBody = await fetchResult.json();
    if (fetchResult.status !== 200) {
        throw new GitHubClientError(url, fetchResult.status, jsonBody);
    }
    return jsonBody.find(filter);
}
export function parseRepoUrl(src) {
    const match = /^(?:(?:https:\/\/)?([^:/]+\.[^:/]+)\/|git@([^:/]+)[:/]|([^/]+):)?([^/\s]+)\/([^/\s#]+)(?:((?:\/[^/\s#]+)+))?(?:\/)?(?:#(.+))?/.exec(src);
    if (!match) {
        const exampleFormats = [
            'github:user/repo',
            'user/repo/subdirectory',
            'git@github.com:user/repo',
            'user/repo#dev',
            'https://github.com/user/repo',
        ];
        throw new Abort(`Parsing the url ${src} failed. Supported formats are ${exampleFormats.join(', ')}.`);
    }
    const site = match[1] || match[2] || match[3] || 'github.com';
    const normalizedSite = site === 'github' ? 'github.com' : site;
    const user = match[4];
    const name = match[5].replace(/\.git$/, '');
    const subDirectory = match[6]?.slice(1);
    const ref = match[7];
    const branch = ref ? `#${ref}` : '';
    const ssh = `git@${normalizedSite}:${user}/${name}`;
    const http = `https://${normalizedSite}/${user}/${name}`;
    const full = ['https:/', normalizedSite, user, name, subDirectory].join('/').concat(branch);
    return { full, site: normalizedSite, user, name, ref, subDirectory, ssh, http };
}
export function parseGithubRepoReference(src) {
    const url = new URL(src);
    const branch = url.hash ? url.hash.slice(1) : undefined;
    const [_, user, repo, ...repoPath] = url.pathname.split('/');
    const filePath = repoPath.length > 0 ? repoPath.join('/') : undefined;
    return {
        repoBaseUrl: `${url.origin}/${user}/${repo}`,
        branch,
        filePath,
    };
}
//# sourceMappingURL=github.js.map