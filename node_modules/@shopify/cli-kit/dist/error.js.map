{"version":3,"file":"error.js","sourceRoot":"","sources":["../src/error.ts"],"names":[],"mappings":"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","sourcesContent":["import {Message, stringifyMessage, TokenizedString} from './output.js'\nimport {normalize} from './path.js'\nimport {renderFatalError} from './public/node/ui.js'\nimport {TextTokenItem} from './private/node/ui/components/TokenizedText.js'\nimport {Errors} from '@oclif/core'\n\nexport {ExtendableError} from 'ts-error'\n\nenum FatalErrorType {\n  Abort,\n  AbortSilent,\n  Bug,\n}\n\nexport class CancelExecution extends Error {}\n\n/**\n * A fatal error represents an error shouldn't be rescued and that causes the execution to terminate.\n * There shouldn't be code that catches fatal errors.\n */\nexport abstract class Fatal extends Error {\n  tryMessage: TextTokenItem | null\n  type: FatalErrorType\n  /**\n   *\n   * @param message - The error message\n   * @param type - The type of fatal error\n   * @param tryMessage - The message that recommends next steps to the user.\n   *                     You can pass a string a {@link TokenizedString} or a {@link TextTokenItem}\n   *                     if you need to style the message inside the error Banner component.\n   */\n  constructor(message: Message, type: FatalErrorType, tryMessage: TextTokenItem | Message | null = null) {\n    super(stringifyMessage(message))\n\n    if (tryMessage) {\n      if (tryMessage instanceof TokenizedString) {\n        this.tryMessage = stringifyMessage(tryMessage)\n      } else {\n        this.tryMessage = tryMessage\n      }\n    } else {\n      this.tryMessage = null\n    }\n\n    this.type = type\n  }\n}\n\n/**\n * An abort error is a fatal error that shouldn't be reported as a bug.\n * Those usually represent unexpected scenarios that we can't handle and that usually require some action from the developer\n */\nexport class Abort extends Fatal {\n  constructor(message: Message, tryMessage: TextTokenItem | Message | null = null) {\n    super(message, FatalErrorType.Abort, tryMessage)\n  }\n}\n\n/**\n * An external error is similar to Abort but has extra command and args attributes.\n * This is useful to represent errors coming from external commands, usually executed by execa.\n */\nexport class ExternalError extends Fatal {\n  command: string\n  args: string[]\n\n  constructor(message: Message, command: string, args: string[], tryMessage: TextTokenItem | Message | null = null) {\n    super(message, FatalErrorType.Abort, tryMessage)\n    this.command = command\n    this.args = args\n  }\n}\n\nexport class AbortSilent extends Fatal {\n  constructor() {\n    super('', FatalErrorType.AbortSilent)\n  }\n}\n\n/**\n * A bug error is an error that represents a bug and therefore should be reported.\n */\nexport class Bug extends Fatal {\n  constructor(message: Message, tryMessage: TextTokenItem | null = null) {\n    super(message, FatalErrorType.Bug, tryMessage)\n  }\n}\n\n/**\n * A function that handles errors that blow up in the CLI.\n * @param error - Error to be handled.\n * @returns A promise that resolves with the error passed.\n */\nexport async function handler(error: unknown): Promise<unknown> {\n  let fatal: Fatal\n  if (isFatal(error)) {\n    fatal = error\n  } else if (typeof error === 'string') {\n    fatal = new Bug(error)\n  } else if (error instanceof Error) {\n    fatal = new Bug(error.message)\n    fatal.stack = error.stack\n  } else {\n    // errors can come in all shapes and sizes...\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const maybeError = error as any\n    fatal = new Bug(maybeError?.message ?? 'Unknown error')\n    if (maybeError?.stack) {\n      fatal.stack = maybeError?.stack\n    }\n  }\n\n  renderFatalError(fatal)\n  return Promise.resolve(error)\n}\n\nexport function mapper(error: unknown): Promise<unknown> {\n  if (error instanceof Errors.CLIError) {\n    const mappedError = new Abort(error.message)\n    mappedError.stack = error.stack\n    return Promise.resolve(mappedError)\n  } else {\n    return Promise.resolve(error)\n  }\n}\n\nexport function isFatal(error: unknown): error is Fatal {\n  try {\n    return Object.prototype.hasOwnProperty.call(error, 'type')\n    // eslint-disable-next-line no-catch-all/no-catch-all\n  } catch {\n    return false\n  }\n}\n\nexport function shouldReport(error: unknown): boolean {\n  if (!isFatal(error)) {\n    return true\n  }\n  if (error.type === FatalErrorType.Bug) {\n    return true\n  }\n  return false\n}\n\n/**\n * Stack traces usually have file:// - we strip that and also remove the Windows drive designation\n *\n */\nexport function cleanSingleStackTracePath(filePath: string): string {\n  return normalize(filePath)\n    .replace('file:/', '/')\n    .replace(/^\\/?[A-Z]:/, '')\n}\n"]}